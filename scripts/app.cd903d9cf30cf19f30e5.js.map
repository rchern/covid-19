{"version":3,"sources":["webpack:///./src/scripts/script.ts","webpack:///./src/scripts/map.ts","webpack:///./src/scripts/logSlider.ts","webpack:///./src/scripts/legend.ts"],"names":["Covid19","mapId","population","regularShades","growthRateShades","yesNoShades","this","max","newDeaths","totalDeaths","newConfirmed","totalConfirmed","newDeathsPerCapita","totalDeathsPerCapita","newConfirmedPerCapita","totalConfirmedPerCapita","totalConfirmedGrowthToday","totalDeathsGrowthToday","totalConfirmedGrowthRate","totalDeathsGrowthRate","newDeathsAverage","newConfirmedAverage","newDeathsPerCapitaAverage","newConfirmedPerCapitaAverage","totalDeathsGrowthTodayAverage","totalConfirmedGrowthTodayAverage","reopenTrajectory","$","when","fetchData","done","legends","generateLegends","map","covid19","styleMap","fetchPopulationData","then","fetchCovid19Data","getJSON","data","countyData","metric","days","confirmed","length","counties","forEach","i","countyFIPS","deaths","countySummary","county","stateAbbr","d","totalConfirmed2Ago","totalDeaths2Ago","totalConfirmedYesterday","totalDeathsYesterday","totalConfirmedToday","totalDeathsToday","newConfirmedToday","newDeathsToday","newConfirmedYesterday","newDeathsYesterday","confirmedGrowthToday","deathsGrowthToday","confirmedGrowthYesterday","deathsGrowthYesterday","checkMax","denominator","console","log","national","Object","keys","reduce","res","cKey","yesterdayConfirmed","yesterdayDeaths","window","getWindow","sum","c","slice","Math","slope","sorted","sort","a","b","half","floor","median","medianGood","allZero","every","v","totalConfirmedGrowthYesterday","totalDeathsGrowthYesterday","n","index","start","end","min","k","indexOf","Legend","LegendItem","slider","legendItems","s","getValue","initMap","initialize","currentDayIndex","animationId","startDate","Date","shades","code","on","google","maps","Map","document","getElementById","zoom","center","lat","lng","loadGeoJson","infoWindow","InfoWindow","addListener","evt","showCountyDetails","handleMetric","handleAnimation","handleToggles","handlePopulation","minPopulation","val","undefined","maxPopulation","target","currentTarget","position","toggleItem","toggleClass","adjust","day","removeClass","addClass","update","setTimeout","click","clearTimeout","date","getFullYear","getMonth","getDate","setDate","text","toLocaleDateString","isGrowth","hide","formatNumber","show","$metric","num","isPercent","toString","replace","geoId","getGeoId","feature","html","setContent","setPosition","latLng","setOptions","pixelOffset","Size","open","getProperty","displayDate","displayLegend","setStyle","styleFeature","bucket","value","formattedValue","shade","getPosition","isOn","getColor","fillColor","strokeWeight","strokeColor","fillOpacity","legend","getHTML","buckets","minp","maxp","minv","maxv","scale","ceil","round","exp","color","items","toggle","generateLegend","find","isInRange","Number"],"mappings":"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","file":"scripts/app.cd903d9cf30cf19f30e5.js","sourcesContent":["import \"../styles/style.scss\";\nimport { CountySummary, Covid19Data, Metric, Metrics, Population, USAFactsCounty, DailyData, DailyDatum } from \"./types\";\nimport Map from \"./map\";\nimport LogarithmicSlider from \"./logSlider\";\nimport { Legend, LegendItem } from \"./legend\";\n\nclass Covid19 {\n  private covid19?: Covid19Data;\n  private legends?: Metrics<Legend>;\n  private population: Population = {};\n  private max: Metrics<number>;\n\n  //private regularShades: string[] = [\"FFFFFF\", \"F2F0F7\", \"DADAEB\", \"BCBDDC\", \"9E9AC8\", \"807DBA\", \"6A51A3\", \"4A1486\"];\n  private regularShades: string[] = [\"FFFFFF\", \"EDF8FB\", \"BFD3E6\", \"9EBCDA\", \"8C96C6\", \"8C6BB1\", \"88419D\", \"6E016B\"];\n  private growthRateShades: string[] = [\"FFFFFF\", \"31A354\", \"A1D99B\", \"E5F5E0\", \"FFF7BC\", \"FEE0D2\", \"FC9272\", \"DE2D26\", \"333333\"];\n  private yesNoShades: string[] = [\"DE2D26\", \"FFFFFF\", \"31A354\"];\n\n  //private growthShades: string[] = [ \"31A354\", \"A1D99B\", \"E5F5E0\", \"white\", \"FEE0D2\", \"FC9272\", \"DE2D26\"];\n\n  private map?: Map;\n\n  constructor(private mapId: string) {\n    this.max = {\n      newDeaths: 0,\n      totalDeaths: 0,\n      newConfirmed: 0,\n      totalConfirmed: 0,\n\n      newDeathsPerCapita: 0,\n      totalDeathsPerCapita: 0,\n      newConfirmedPerCapita: 0,\n      totalConfirmedPerCapita: 0,\n\n      totalConfirmedGrowthToday: 0,\n      totalDeathsGrowthToday: 0,\n\n      totalConfirmedGrowthRate: 0,\n      totalDeathsGrowthRate: 0,\n\n      newDeathsAverage: 0,\n      newConfirmedAverage: 0,\n      newDeathsPerCapitaAverage: 0,\n      newConfirmedPerCapitaAverage: 0,\n      totalDeathsGrowthTodayAverage: 0,\n      totalConfirmedGrowthTodayAverage: 0,\n\n      reopenTrajectory: 1,\n    };\n  }\n\n  initialize(): void {\n    $.when(this.fetchData()).done(() => {\n      this.legends = this.generateLegends();\n      this.map = new Map(this.mapId, \"totalConfirmed\", this.covid19!, this.max!, this.legends);\n      this.map!.styleMap();\n    });\n  }\n\n  fetchData(): JQuery.Thenable<USAFactsCounty[]> {\n    return $.when(this.fetchPopulationData()).then(() => this.fetchCovid19Data());\n    // await this.fetchPopulationData();\n    // return await this.fetchCovid19Data();\n  }\n\n  fetchPopulationData(): JQuery.jqXHR<Population> {\n    return $.getJSON(\"./data/population.json\").done((data: Population) => {\n      this.population = data;\n    });\n  }\n\n  checkMax(countyData: Metrics<number>, metric: Metric): void {\n    const max = countyData[metric] || 0;\n    if (max > (this.max[metric] || 0)) {\n      this.max[metric] = max;\n    }\n  }\n\n  fetchCovid19Data(): JQuery.jqXHR<USAFactsCounty[]> {\n    return $.getJSON(\"https://script.google.com/macros/s/AKfycby9NQ59C_tP1oLlYRnUeY8g-5HfSFwJsE77OksJDO5kfUB0yL4/exec\").done((data: USAFactsCounty[]) => {\n      const days = data[0].confirmed.length;\n\n      this.covid19 = { counties: {}, days: [] };\n      data.forEach((i) => {\n        if (i.countyFIPS === \"00\" || i.deaths[days - 1] > i.confirmed[days - 1]) {\n          return;\n        }\n\n        const countySummary: CountySummary = {\n          county: i.county,\n          stateAbbr: i.stateAbbr,\n          population: this.population[i.countyFIPS],\n        };\n\n        this.covid19!.counties[i.countyFIPS] = countySummary;\n\n        for (let d = 0; d < days; d++) {\n          const totalConfirmed2Ago = d <= 1 ? 0 : i.confirmed[d - 2];\n          const totalDeaths2Ago = d <= 1 ? 0 : i.deaths[d - 2];\n\n          let totalConfirmedYesterday = d === 0 ? 0 : i.confirmed[d - 1];\n          let totalDeathsYesterday = d === 0 ? 0 : i.deaths[d - 1];\n\n          if (totalConfirmedYesterday < totalConfirmed2Ago) {\n            totalConfirmedYesterday = totalConfirmed2Ago;\n          }\n          if (totalDeathsYesterday < totalDeaths2Ago) {\n            totalDeathsYesterday = totalDeaths2Ago;\n          }\n\n          let totalConfirmedToday = i.confirmed[d];\n          let totalDeathsToday = i.deaths[d];\n\n          if (totalConfirmedToday < totalConfirmedYesterday) {\n            totalConfirmedToday = totalConfirmedYesterday;\n          }\n          if (totalDeathsToday < totalDeathsYesterday) {\n            totalDeathsToday = totalDeathsYesterday;\n          }\n\n          const newConfirmedToday = totalConfirmedToday - totalConfirmedYesterday;\n          const newDeathsToday = totalDeathsToday - totalDeathsYesterday;\n\n          const newConfirmedYesterday = totalConfirmedYesterday - totalConfirmed2Ago;\n          const newDeathsYesterday = totalDeathsYesterday - totalDeaths2Ago;\n\n          const confirmedGrowthToday = totalConfirmedYesterday === 0 ? 0 : (newConfirmedToday / totalConfirmedYesterday) * 100;\n          const deathsGrowthToday = totalDeathsYesterday === 0 ? 0 : (newDeathsToday / totalDeathsYesterday) * 100;\n\n          const confirmedGrowthYesterday = totalConfirmed2Ago === 0 ? 0 : (newConfirmedYesterday / totalConfirmed2Ago) * 100;\n          const deathsGrowthYesterday = totalDeaths2Ago === 0 ? 0 : (newDeathsYesterday / totalDeaths2Ago) * 100;\n\n          const confirmedGrowthComparison = confirmedGrowthYesterday === 0 ? 0 : (confirmedGrowthToday / confirmedGrowthYesterday) * 100;\n          const deathsGrowthComparison = deathsGrowthYesterday === 0 ? 0 : (deathsGrowthToday / deathsGrowthYesterday) * 100;\n\n          const countyData: Metrics<number> = {\n            totalConfirmed: totalConfirmedToday,\n            totalDeaths: totalDeathsToday,\n\n            newConfirmed: newConfirmedToday,\n            newDeaths: newDeathsToday,\n\n            totalConfirmedGrowthToday: confirmedGrowthToday,\n            totalDeathsGrowthToday: deathsGrowthToday,\n\n            totalConfirmedGrowthRate: confirmedGrowthComparison,\n            totalDeathsGrowthRate: deathsGrowthComparison,\n          };\n\n          this.checkMax(countyData, \"totalConfirmed\");\n          this.checkMax(countyData, \"totalDeaths\");\n          this.checkMax(countyData, \"newConfirmed\");\n          this.checkMax(countyData, \"newDeaths\");\n\n          if (countySummary.population !== null) {\n            const denominator = countySummary.population / 1000000;\n\n            countyData.totalConfirmedPerCapita = countyData.totalConfirmed / denominator;\n            countyData.totalDeathsPerCapita = countyData.totalDeaths / denominator;\n\n            countyData.newConfirmedPerCapita = countyData.newConfirmed / denominator;\n            countyData.newDeathsPerCapita = countyData.newDeaths / denominator;\n\n            this.checkMax(countyData, \"totalConfirmedPerCapita\");\n            this.checkMax(countyData, \"totalDeathsPerCapita\");\n            this.checkMax(countyData, \"newConfirmedPerCapita\");\n            this.checkMax(countyData, \"newDeathsPerCapita\");\n          } else {\n            console.log(i.county, \"no population\");\n          }\n\n          if (this.covid19!.days[d] == null) {\n            this.covid19!.days[d] = {\n              national: {} as Metrics<number>,\n              data: {} as DailyDatum,\n            } as DailyData;\n          }\n          this.covid19!.days[d].data[i.countyFIPS] = countyData;\n        }\n      });\n\n      this.covid19.days.forEach((d, i) => {\n        d.national = Object.keys(d.data).reduce((res, cKey) => {\n          const countyData = d.data[cKey];\n\n          res.totalConfirmed = (res.totalConfirmed || 0) + countyData.totalConfirmed;\n          res.totalDeaths = (res.totalDeaths || 0) + countyData.totalDeaths;\n          res.newConfirmed = (res.newConfirmed || 0) + countyData.newConfirmed;\n          res.newDeaths = (res.newDeaths || 0) + countyData.newDeaths;\n\n          const yesterdayConfirmed = res.totalConfirmed - res.newConfirmed;\n          res.totalConfirmedGrowthToday = yesterdayConfirmed === 0 ? 0 : (res.newConfirmed / yesterdayConfirmed) * 100;\n\n          const yesterdayDeaths = res.totalDeaths - res.newDeaths;\n          res.totalDeathsGrowthToday = yesterdayDeaths === 0 ? 0 : (res.newDeaths / yesterdayDeaths) * 100;\n\n          const window = this.getWindow(i).map((d) => d.data[cKey]);\n          countyData.newConfirmedAverage = window.reduce((sum, c) => sum + c.newConfirmed, 0) / window.length;\n          countyData.newDeathsAverage = window.reduce((sum, c) => sum + c.newDeaths, 0) / window.length;\n          countyData.totalConfirmedGrowthTodayAverage = window.reduce((sum, c) => sum + c.totalConfirmedGrowthToday, 0) / window.length;\n          countyData.totalDeathsGrowthTodayAverage = window.reduce((sum, c) => sum + c.totalDeathsGrowthToday, 0) / window.length;\n\n          this.checkMax(countyData, \"newConfirmedAverage\");\n          this.checkMax(countyData, \"newDeathsAverage\");\n          this.checkMax(countyData, \"totalConfirmedGrowthTodayAverage\");\n          this.checkMax(countyData, \"totalDeathsGrowthTodayAverage\");\n\n          countyData.reopenTrajectory = 0;\n          if (countyData.totalConfirmed > 0 && i >= 13) {\n            const slice = this.covid19!.days.slice(Math.max(0, i - 14), i).map((c) => c.data[cKey].newConfirmedAverage);\n\n            const slope = (slice[slice.length - 1]! - slice[0]!) / slice.length;\n\n            const sorted = [...slice].sort((a, b) => b! - a!);\n\n            const half = Math.floor(slice.length / 2);\n\n            const median = (sorted[half - 1]! + sorted[half]!) / 2.0;\n\n            const medianGood = slice[0]! > median && slice[slice.length - 1]! < median;\n\n            const allZero = slice.every((v) => v == 0);\n\n            countyData.reopenTrajectory = slope < 0 && (allZero || medianGood) ? 1 : -1;\n\n            //countyData.reopenTrajectory = slope < 0 ? 1 : (slope > 0 ? -1 : 0);\n          }\n\n          const countySummary = this.covid19!.counties[cKey];\n          if (countySummary.population !== null) {\n            countyData.newConfirmedPerCapitaAverage = window.reduce((sum, c) => sum + c.newConfirmedPerCapita!, 0) / window.length;\n            countyData.newDeathsPerCapitaAverage = window.reduce((sum, c) => sum + c.newDeathsPerCapita!, 0) / window.length;\n\n            this.checkMax(countyData, \"newConfirmedPerCapitaAverage\");\n            this.checkMax(countyData, \"newDeathsPerCapitaAverage\");\n          }\n\n          return res;\n        }, {} as Metrics<number>);\n      });\n\n      this.covid19!.days.forEach((d, i) => {\n        if (i > 0) {\n          const totalConfirmedGrowthYesterday = this.covid19!.days[i - 1].national.totalConfirmedGrowthToday;\n          d.national.totalConfirmedGrowthRate =\n            totalConfirmedGrowthYesterday === 0 ? 0 : (d.national.totalConfirmedGrowthToday / totalConfirmedGrowthYesterday) * 100;\n\n          const totalDeathsGrowthYesterday = this.covid19!.days[i - 1].national.totalDeathsGrowthToday;\n          d.national.totalDeathsGrowthRate = totalDeathsGrowthYesterday === 0 ? 0 : (d.national.totalDeathsGrowthToday / totalDeathsGrowthYesterday) * 100;\n        }\n\n        const window = this.getWindow(i).map((d) => d.national);\n        d.national.newConfirmedAverage = window.reduce((sum, n) => sum + n.newConfirmed, 0) / window.length;\n        d.national.newDeathsAverage = window.reduce((sum, n) => sum + n.newDeaths, 0) / window.length;\n        d.national.totalConfirmedGrowthTodayAverage = window.reduce((sum, c) => sum + c.totalConfirmedGrowthToday, 0) / window.length;\n        d.national.totalDeathsGrowthTodayAverage = window.reduce((sum, c) => sum + c.totalDeathsGrowthToday, 0) / window.length;\n      });\n    });\n  }\n\n  getWindow(index: number): DailyData[] {\n    const start = Math.max(0, index - 3);\n    const end = Math.min(this.covid19!.days.length, index + 4);\n    return this.covid19!.days.slice(start, end);\n  }\n\n  generateLegends(): Metrics<Legend> {\n    const legends = Object.keys(this.max).reduce((res, k) => {\n      if (k.indexOf(\"GrowthToday\") > 0) {\n        res[k as Metric] = new Legend([\n          new LegendItem(0, this.regularShades[0], 0, 0, true),\n          new LegendItem(1, this.regularShades[1], 1, 16, true),\n          new LegendItem(2, this.regularShades[2], 17, 32, true),\n          new LegendItem(3, this.regularShades[3], 33, 48, true),\n          new LegendItem(4, this.regularShades[4], 49, 64, true),\n          new LegendItem(5, this.regularShades[5], 65, 80, true),\n          new LegendItem(6, this.regularShades[6], 81, 99, true),\n          new LegendItem(7, this.regularShades[7], 100, null, true),\n        ]);\n      } else if (k.indexOf(\"GrowthRate\") > 0) {\n        res[k as Metric] = new Legend([\n          new LegendItem(0, this.growthRateShades[0], 0, 0, true),\n          new LegendItem(1, this.growthRateShades[1], 1, 33, true),\n          new LegendItem(2, this.growthRateShades[2], 34, 66, true),\n          new LegendItem(3, this.growthRateShades[3], 67, 99, true),\n          new LegendItem(4, this.growthRateShades[4], 100, 100, true),\n          new LegendItem(5, this.growthRateShades[5], 101, 133, true),\n          new LegendItem(6, this.growthRateShades[6], 134, 166, true),\n          new LegendItem(7, this.growthRateShades[7], 167, 199, true),\n          new LegendItem(7, this.growthRateShades[8], 200, null, true),\n        ]);\n      } else if (k === \"reopenTrajectory\") {\n        res[k as Metric] = new Legend([\n          new LegendItem(0, this.yesNoShades[0], -1, -1, true, \"Not Ready to Re-Open\"),\n          new LegendItem(1, this.yesNoShades[1], 0, 0, true, \"Not Enough Data\"),\n          new LegendItem(2, this.yesNoShades[2], 1, 1, true, \"Ready To Re-Open\"),\n        ]);\n      } else {\n        const slider = new LogarithmicSlider(this.regularShades.length, this.max[k as Metric]!);\n        const legendItems = this.regularShades.map((s, i) => new LegendItem(i, s, i === 0 ? 0 : slider.getValue(i - 1) + 1, slider.getValue(i), true));\n        res[k as Metric] = new Legend(legendItems);\n      }\n      return res;\n    }, {} as Metrics<Legend>);\n\n    return legends;\n  }\n}\n\ndeclare global {\n  interface Window {\n    initMap: () => void;\n    covid19: Covid19;\n  }\n}\n\nwindow.initMap = function initMap(): void {\n  const covid19 = new Covid19(\"map\");\n  window.covid19 = covid19;\n  covid19.initialize();\n};\n","import { Color, Metric, Metrics, Covid19Data } from \"./types\";\nimport { Legend } from \"./legend\";\n\nexport default class Map {\n  private map: google.maps.Map;\n  private infoWindow: google.maps.InfoWindow;\n  private currentDayIndex = 0;\n  private minPopulation?: number;\n  private maxPopulation?: number;\n  private animationId: NodeJS.Timeout | null = null;\n  private startDate = new Date(2020, 0, 22);\n\n  private shades: Color[] = [\n    { code: \"F2F0F7\", on: true },\n    { code: \"DADAEB\", on: true },\n    { code: \"BCBDDC\", on: true },\n    { code: \"9E9AC8\", on: true },\n    { code: \"807DBA\", on: true },\n    { code: \"6A51A3\", on: true },\n    { code: \"4A1486\", on: true },\n    { code: \"333333\", on: true },\n  ];\n\n  constructor(private mapId: string, private metric: Metric, private data: Covid19Data, private max: Metrics<number>, private legends: Metrics<Legend>) {\n    this.currentDayIndex = data.days.length - 1;\n\n    this.map = new google.maps.Map(document.getElementById(this.mapId) as Element, {\n      zoom: 4,\n      center: { lat: 38.95809, lng: -95.26726 },\n    });\n    this.map.data.loadGeoJson(\"./data/gz_2010_us_050_00_20m.json\");\n    this.infoWindow = new google.maps.InfoWindow();\n\n    this.map.data.addListener(\"click\", (evt: google.maps.Data.MouseEvent) => {\n      this.showCountyDetails(evt);\n    });\n\n    this.handleMetric();\n    this.handleAnimation();\n    this.handleToggles();\n    this.handlePopulation();\n\n    this.styleMap();\n  }\n\n  handlePopulation(): void {\n    const minPopulation = $(\"#minPopulation\");\n    minPopulation.on(\"change\", () => {\n      const val = minPopulation.val();\n      this.minPopulation = val === \"\" ? undefined : (val as number) * 1000;\n\n      this.styleMap();\n    });\n\n    const maxPopulation = $(\"#maxPopulation\");\n    maxPopulation.on(\"change\", () => {\n      const val = maxPopulation.val();\n      this.maxPopulation = val === \"\" ? undefined : (val as number) * 1000;\n\n      this.styleMap();\n    });\n  }\n\n  handleToggles(): void {\n    $(\"#legend\").on(\"click\", \".legend-value\", (evt) => {\n      const target = $(evt.currentTarget);\n      const position = target.data(\"position\");\n\n      this.legends[this.metric]!.toggleItem(position);\n      target.toggleClass(\"on\");\n\n      this.styleMap();\n    });\n  }\n\n  handleAnimation(): void {\n    const adjust = (day: number): void => {\n      if (day >= 0 && day <= this.data.days.length - 1) {\n        this.currentDayIndex = day;\n        this.styleMap();\n      }\n    };\n    $(\"#rewind-all\").on(\"click\", () => adjust(0));\n    $(\"#rewind-1\").on(\"click\", () => adjust(this.currentDayIndex - 1));\n    $(\"#fast-forward-1\").on(\"click\", () => adjust(this.currentDayIndex + 1));\n    $(\"#toggle\").on(\"click\", () => {\n      if (this.animationId == null) {\n        $(\"#toggle\").removeClass(\"play\").addClass(\"pause\");\n        const update = (): void => {\n          this.animationId = setTimeout(() => {\n            if (this.currentDayIndex < this.data.days.length - 1) {\n              adjust(this.currentDayIndex + 1);\n              update();\n            } else {\n              $(\"#toggle\").click();\n            }\n          }, 50);\n        };\n\n        update();\n      } else {\n        $(\"#toggle\").removeClass(\"pause\").addClass(\"play\");\n        clearTimeout(this.animationId);\n        this.animationId = null;\n      }\n    });\n    $(\"#fast-forward-all\").on(\"click\", () => adjust(this.data.days.length - 1));\n  }\n\n  displayDate(): void {\n    const date = new Date(this.startDate.getFullYear(), this.startDate.getMonth(), this.startDate.getDate());\n    date.setDate(date.getDate() + this.currentDayIndex);\n    $(\"#currentDate\").text(date.toLocaleDateString(\"en-US\"));\n\n    const isGrowth = this.metric.indexOf(\"Growth\") >= 0;\n    const national = this.data.days[this.currentDayIndex].national[this.metric];\n\n    if (national == null) {\n      $(\"#nationValue\").text(\"\");\n      $(\"#national\").hide();\n    } else {\n      $(\"#nationalValue\").text(this.formatNumber(national, isGrowth) + (isGrowth ? \"%\" : \"\"));\n      $(\"#national\").show();\n    }\n  }\n\n  handleMetric(): void {\n    const $metric = $(\"#metric\");\n    $metric.on(\"change\", () => {\n      this.metric = $metric.val() as Metric;\n      this.styleMap();\n    });\n  }\n\n  formatNumber(num: number, isPercent = false): string {\n    const val = isPercent ? Math.floor(num * 100) / 100 : Math.floor(num);\n    return val.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n  }\n\n  showCountyDetails(evt: google.maps.Data.MouseEvent): void {\n    const geoId = this.getGeoId(evt.feature);\n\n    const countyData = this.data.days[this.currentDayIndex].data[geoId];\n    const county = this.data.counties[geoId];\n\n    const html = `\n<div data-fips=\"${geoId}\"><b>${county.county}, ${county.stateAbbr}</b></div>\n<div>Population:  ${this.formatNumber(county.population)}</div>\n<p>Day ${this.currentDayIndex}</p>\n<p></p>\n<p>\n    14-day Downward Case Trajectory for Reopen: ${countyData.reopenTrajectory == -1 ? \"no\" : countyData.reopenTrajectory == 1 ? \"yes\" : \"not enough data\"}\n<p>\n    New Confirmed: ${this.formatNumber(countyData.newConfirmed)} (${this.formatNumber(countyData.newConfirmedAverage!)} avg)\n    <br />\n    ${this.formatNumber(countyData.newConfirmedPerCapita!)} per million (${this.formatNumber(countyData.newConfirmedPerCapitaAverage!)} avg)\n</p>\n<p>\n    Total Confirmed: ${this.formatNumber(countyData.totalConfirmed)}\n    <br />\n    ${this.formatNumber(countyData.totalConfirmedPerCapita!)} per million\n</p>\n<p>\n    Confirmed Growth:\n    ${this.formatNumber(countyData.totalConfirmedGrowthToday, true)}% yesterday (${this.formatNumber(countyData.totalConfirmedGrowthTodayAverage!, true)}% avg)\n    <br />\n    ${this.formatNumber(countyData.totalConfirmedGrowthRate, true)}% change from yesterday\n</p>\n<p></p>\n<p>\n    New Deaths: ${this.formatNumber(countyData.newDeaths)} (${this.formatNumber(countyData.newDeathsAverage!)} avg)\n    <br />\n    ${this.formatNumber(countyData.newDeathsPerCapita!)} per million (${this.formatNumber(countyData.newDeathsPerCapitaAverage!)} avg)\n</p>\n<p>\n    Total Deaths: ${this.formatNumber(countyData.totalDeaths)}\n    <br />\n    ${this.formatNumber(countyData.totalDeathsPerCapita!)} per million\n</p>\n<p>\n    Deaths Growth:\n    ${this.formatNumber(countyData.totalDeathsGrowthToday!, true)}% from yesterday (${this.formatNumber(countyData.totalDeathsGrowthTodayAverage!, true)}% avg)\n    <br />\n    ${this.formatNumber(countyData.totalDeathsGrowthRate, true)}% change from yesterday\n</p>\n  `;\n\n    this.infoWindow!.setContent(html);\n    this.infoWindow!.setPosition(evt.latLng);\n    this.infoWindow!.setOptions({ pixelOffset: new google.maps.Size(0, -34) });\n    this.infoWindow!.open(this.map!);\n  }\n\n  getGeoId(feature: google.maps.Data.Feature): string {\n    return feature.getProperty(\"GEOID\");\n  }\n\n  styleMap(): void {\n    this.displayDate();\n    const day = this.currentDayIndex;\n\n    if (day == 0) {\n      $(\"#rewind-1,#rewind-all\").addClass(\"disabled\");\n    } else {\n      $(\"#rewind-1,#rewind-all\").removeClass(\"disabled\");\n    }\n\n    if (day == this.data.days.length - 1) {\n      $(\"#fast-forward-1,#fast-forward-all,#toggle\").addClass(\"disabled\");\n    } else {\n      $(\"#fast-forward-1,#fast-forward-all,#toggle\").removeClass(\"disabled\");\n    }\n\n    this.displayLegend();\n    this.map!.data.setStyle((feature) => this.styleFeature(feature));\n  }\n\n  styleFeature(feature: google.maps.Data.Feature): google.maps.Data.StyleOptions {\n    const geoId = this.getGeoId(feature);\n    const countyData = this.data.days[this.currentDayIndex].data[geoId];\n    const county = this.data.counties[geoId];\n\n    let bucket = \"white\";\n    if (countyData != null) {\n      const value = countyData[this.metric] || 0;\n      const formattedValue = this.formatNumber(value, this.metric.indexOf(\"Growth\") >= 0);\n      const shade = this.legends[this.metric]!.getPosition(formattedValue);\n\n      if (shade == null) {\n        console.log(geoId, countyData, county, value, formattedValue, shade);\n      }\n      if (shade.isOn()) {\n        if (\n          (this.minPopulation == null || this.minPopulation <= county.population) &&\n          (this.maxPopulation == null || this.maxPopulation >= county.population)\n        ) {\n          bucket = \"#\" + shade.getColor();\n        }\n      }\n    }\n\n    return {\n      fillColor: bucket,\n      strokeWeight: 1,\n      strokeColor: \"#CCCCCC\",\n      fillOpacity: 0.75,\n    };\n  }\n\n  displayLegend(): void {\n    const legend = this.legends[this.metric];\n    $(\"#legend\").html(legend!.getHTML());\n  }\n}\n","export default class LogarithmicSlider {\n  private minp: number;\n  private maxp: number;\n  private minv: number;\n  private maxv: number;\n  private scale: number;\n\n  constructor(private buckets: number, private max: number) {\n    this.minp = 0;\n    this.maxp = buckets - 1;\n    this.minv = 0;\n    this.maxv = Math.log(max);\n    this.scale = (this.maxv - this.minv) / (this.maxp - this.minp);\n  }\n  getPosition(value: number): number {\n    if (value <= 0) {\n      return 0;\n    }\n    let position = Math.ceil((Math.log(value) - this.minv) / this.scale + this.minp);\n    if (position === 0 && value > 0) {\n      position = 1;\n    }\n    return position;\n  }\n  getValue(position: number): number {\n    let value = Math.round(Math.exp(this.minv + this.scale * (position - this.minp)));\n    if (position === 0 && value > 0) {\n      value = 0;\n    }\n    return value;\n  }\n}\n","export class LegendItem {\n  constructor(\n    private position: number,\n    private color: string,\n    private min: number | null,\n    private max: number | null,\n    private on: boolean,\n    private text?: string\n  ) {}\n\n  toggle(): void {\n    this.on = !this.on;\n  }\n\n  isOn(): boolean {\n    return this.on;\n  }\n\n  generateLegend(): string {\n    let text = \"\";\n    if (this.text != null) {\n      text = this.text;\n    } else {\n      text = `${this.min} to ${this.max}`;\n      if (this.min === this.max) {\n        text = `${this.min}`;\n      } else if (this.min === null) {\n        text = `<= ${this.max}`;\n      } else if (this.max === null) {\n        text = `>= ${this.min}`;\n      }\n    }\n    return `\n<div class='col-6 col-sm-3'>\n  <div data-position=\"${this.position}\" class=\"legend-value ${this.on ? \"on\" : \"\"}\" style=\"background-color: #${this.color}\">\n    <div>${text}</div>\n  </div>\n</div>\n    `;\n  }\n\n  isInRange(value: number): boolean {\n    return (this.min === null || value >= this.min) && (this.max === null || value <= this.max);\n  }\n  getColor(): string {\n    return this.color;\n  }\n}\n\nexport class Legend {\n  constructor(private items: LegendItem[]) {}\n\n  toggleItem(position: number): void {\n    this.items[position].toggle();\n  }\n\n  getHTML(): string {\n    let html = \"\";\n\n    html += \"<div>\";\n    html += \"<div class='row align-items-center no-gutters'>\";\n\n    this.items.forEach((i) => (html += i.generateLegend()));\n\n    html += \"</div>\";\n    html += \"</div>\";\n\n    return html;\n  }\n\n  isOn(position: number): boolean {\n    return this.items[position].isOn();\n  }\n\n  getPosition(value: string): LegendItem {\n    return this.items.find((i) => i.isInRange(Math.floor(Number(value.toString().replace(\",\", \"\")))))!;\n  }\n}\n"],"sourceRoot":""}