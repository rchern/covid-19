{"version":3,"sources":["webpack:///./src/scripts/script.ts","webpack:///./src/scripts/map.ts","webpack:///./src/scripts/logSlider.ts","webpack:///./src/scripts/legend.ts"],"names":["Covid19","mapId","population","regularShades","growthRateShades","this","max","newDeaths","totalDeaths","newConfirmed","totalConfirmed","newDeathsPerCapita","totalDeathsPerCapita","newConfirmedPerCapita","totalConfirmedPerCapita","totalConfirmedGrowthToday","totalDeathsGrowthToday","totalConfirmedGrowthRate","totalDeathsGrowthRate","newDeathsAverage","newConfirmedAverage","newDeathsPerCapitaAverage","newConfirmedPerCapitaAverage","totalDeathsGrowthTodayAverage","totalConfirmedGrowthTodayAverage","$","when","fetchData","done","legends","generateLegends","map","covid19","styleMap","fetchPopulationData","then","fetchCovid19Data","getJSON","data","countyData","metric","days","confirmed","length","counties","forEach","i","countyFIPS","deaths","countySummary","county","stateAbbr","d","totalConfirmed2Ago","totalDeaths2Ago","totalConfirmedYesterday","totalDeathsYesterday","totalConfirmedToday","totalDeathsToday","newConfirmedToday","newDeathsToday","newConfirmedYesterday","newDeathsYesterday","confirmedGrowthToday","Math","floor","deathsGrowthToday","confirmedGrowthYesterday","deathsGrowthYesterday","confirmedGrowthComparison","deathsGrowthComparison","checkMax","denominator","national","Object","keys","reduce","res","cKey","yesterdayConfirmed","yesterdayDeaths","window","getWindow","sum","c","totalConfirmedGrowthYesterday","totalDeathsGrowthYesterday","n","index","start","end","min","slice","k","indexOf","Legend","LegendItem","slider","legendItems","s","getValue","initMap","initialize","currentDayIndex","animationId","startDate","Date","shades","code","on","google","maps","Map","document","getElementById","zoom","center","lat","lng","loadGeoJson","infoWindow","InfoWindow","addListener","evt","showCountyDetails","handleMetric","handleAnimation","handleToggles","handlePopulation","minPopulation","val","undefined","maxPopulation","target","currentTarget","position","toggleItem","toggleClass","adjust","day","removeClass","addClass","update","setTimeout","click","clearTimeout","date","getFullYear","getMonth","getDate","setDate","text","toLocaleDateString","isGrowth","hide","toString","replace","show","$metric","geoId","getGeoId","feature","html","setContent","setPosition","latLng","setOptions","pixelOffset","Size","open","getProperty","displayDate","displayLegend","setStyle","styleFeature","bucket","value","shade","getPosition","isOn","getColor","fillColor","strokeWeight","strokeColor","fillOpacity","legend","getHTML","buckets","minp","maxp","minv","maxv","log","scale","ceil","round","exp","color","items","toggle","generateLegend","find","isInRange"],"mappings":"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","file":"scripts/app.1fcf9a1fa495a8a382df.js","sourcesContent":["import \"../styles/style.scss\";\nimport { CountySummary, Covid19Data, Metric, Metrics, Population, USAFactsCounty, DailyData, DailyDatum } from \"./types\";\nimport Map from \"./map\";\nimport LogarithmicSlider from \"./logSlider\";\nimport { Legend, LegendItem } from \"./legend\";\n\nclass Covid19 {\n  private covid19?: Covid19Data;\n  private legends?: Metrics<Legend>;\n  private population: Population = {};\n  private max: Metrics<number>;\n\n  private regularShades: string[] = [\"FFFFFF\", \"F2F0F7\", \"DADAEB\", \"BCBDDC\", \"9E9AC8\", \"807DBA\", \"6A51A3\", \"4A1486\"];\n  private growthRateShades: string[] = [\"FFFFFF\", \"31A354\", \"A1D99B\", \"E5F5E0\", \"FFF7BC\", \"FEE0D2\", \"FC9272\", \"DE2D26\", \"333333\"];\n  //private growthShades: string[] = [ \"31A354\", \"A1D99B\", \"E5F5E0\", \"white\", \"FEE0D2\", \"FC9272\", \"DE2D26\"];\n\n  private map?: Map;\n\n  constructor(private mapId: string) {\n    this.max = {\n      newDeaths: 0,\n      totalDeaths: 0,\n      newConfirmed: 0,\n      totalConfirmed: 0,\n\n      newDeathsPerCapita: 0,\n      totalDeathsPerCapita: 0,\n      newConfirmedPerCapita: 0,\n      totalConfirmedPerCapita: 0,\n\n      totalConfirmedGrowthToday: 0,\n      totalDeathsGrowthToday: 0,\n\n      totalConfirmedGrowthRate: 0,\n      totalDeathsGrowthRate: 0,\n\n      newDeathsAverage: 0,\n      newConfirmedAverage: 0,\n      newDeathsPerCapitaAverage: 0,\n      newConfirmedPerCapitaAverage: 0,\n      totalDeathsGrowthTodayAverage: 0,\n      totalConfirmedGrowthTodayAverage: 0,\n    };\n  }\n\n  initialize(): void {\n    $.when(this.fetchData()).done(() => {\n      this.legends = this.generateLegends();\n      this.map = new Map(this.mapId, \"totalConfirmed\", this.covid19!, this.max!, this.legends);\n      this.map!.styleMap();\n    });\n  }\n\n  fetchData(): JQuery.Thenable<USAFactsCounty[]> {\n    return $.when(this.fetchPopulationData()).then(() => this.fetchCovid19Data());\n    // await this.fetchPopulationData();\n    // return await this.fetchCovid19Data();\n  }\n\n  fetchPopulationData(): JQuery.jqXHR<Population> {\n    return $.getJSON(\"./data/population.json\").done((data: Population) => {\n      this.population = data;\n    });\n  }\n\n  checkMax(countyData: Metrics<number>, metric: Metric): void {\n    const max = countyData[metric] || 0;\n    if (max > (this.max[metric] || 0)) {\n      this.max[metric] = max;\n    }\n  }\n\n  fetchCovid19Data(): JQuery.jqXHR<USAFactsCounty[]> {\n    return $.getJSON(\"https://usafactsstatic.blob.core.windows.net/public/2020/coronavirus-timeline/allData.json\").done((data: USAFactsCounty[]) => {\n      const days = data[0].confirmed.length;\n\n      this.covid19 = { counties: {}, days: [] };\n      data.forEach((i) => {\n        if (i.countyFIPS === \"00\" || i.deaths[days - 1] > i.confirmed[days - 1]) {\n          return;\n        }\n\n        const countySummary: CountySummary = {\n          county: i.county,\n          stateAbbr: i.stateAbbr,\n          population: this.population[i.countyFIPS],\n        };\n\n        this.covid19!.counties[i.countyFIPS] = countySummary;\n\n        for (let d = 0; d < days; d++) {\n          const totalConfirmed2Ago = d <= 1 ? 0 : i.confirmed[d - 2];\n          const totalDeaths2Ago = d <= 1 ? 0 : i.deaths[d - 2];\n\n          let totalConfirmedYesterday = d === 0 ? 0 : i.confirmed[d - 1];\n          let totalDeathsYesterday = d === 0 ? 0 : i.deaths[d - 1];\n\n          if (totalConfirmedYesterday < totalConfirmed2Ago) {\n            totalConfirmedYesterday = totalConfirmed2Ago;\n          }\n          if (totalDeathsYesterday < totalDeaths2Ago) {\n            totalDeathsYesterday = totalDeaths2Ago;\n          }\n\n          let totalConfirmedToday = i.confirmed[d];\n          let totalDeathsToday = i.deaths[d];\n\n          if (totalConfirmedToday < totalConfirmedYesterday) {\n            totalConfirmedToday = totalConfirmedYesterday;\n          }\n          if (totalDeathsToday < totalDeathsYesterday) {\n            totalDeathsToday = totalDeathsYesterday;\n          }\n\n          const newConfirmedToday = totalConfirmedToday - totalConfirmedYesterday;\n          const newDeathsToday = totalDeathsToday - totalDeathsYesterday;\n\n          const newConfirmedYesterday = totalConfirmedYesterday - totalConfirmed2Ago;\n          const newDeathsYesterday = totalDeathsYesterday - totalDeaths2Ago;\n\n          const confirmedGrowthToday = totalConfirmedYesterday === 0 ? 0 : Math.floor((newConfirmedToday / totalConfirmedYesterday) * 100);\n          const deathsGrowthToday = totalDeathsYesterday === 0 ? 0 : Math.floor((newDeathsToday / totalDeathsYesterday) * 100);\n\n          const confirmedGrowthYesterday = totalConfirmed2Ago === 0 ? 0 : Math.floor((newConfirmedYesterday / totalConfirmed2Ago) * 100);\n          const deathsGrowthYesterday = totalDeaths2Ago === 0 ? 0 : Math.floor((newDeathsYesterday / totalDeaths2Ago) * 100);\n\n          const confirmedGrowthComparison = confirmedGrowthYesterday === 0 ? 0 : Math.floor((confirmedGrowthToday / confirmedGrowthYesterday) * 100);\n          const deathsGrowthComparison = deathsGrowthYesterday === 0 ? 0 : Math.floor((deathsGrowthToday / deathsGrowthYesterday) * 100);\n\n          const countyData: Metrics<number> = {\n            totalConfirmed: totalConfirmedToday,\n            totalDeaths: totalDeathsToday,\n\n            newConfirmed: newConfirmedToday,\n            newDeaths: newDeathsToday,\n\n            totalConfirmedGrowthToday: Math.floor(confirmedGrowthToday * 100) / 100,\n            totalDeathsGrowthToday: Math.floor(deathsGrowthToday * 100) / 100,\n\n            totalConfirmedGrowthRate: Math.floor(confirmedGrowthComparison * 100) / 100,\n            totalDeathsGrowthRate: Math.floor(deathsGrowthComparison * 100) / 100,\n          };\n\n          this.checkMax(countyData, \"totalConfirmed\");\n          this.checkMax(countyData, \"totalDeaths\");\n          this.checkMax(countyData, \"newConfirmed\");\n          this.checkMax(countyData, \"newDeaths\");\n\n          if (countySummary.population !== null) {\n            const denominator = countySummary.population / 1000000;\n\n            countyData.totalConfirmedPerCapita = Math.floor(countyData.totalConfirmed / denominator);\n            countyData.totalDeathsPerCapita = Math.floor(countyData.totalDeaths / denominator);\n\n            countyData.newConfirmedPerCapita = Math.floor(countyData.newConfirmed / denominator);\n            countyData.newDeathsPerCapita = Math.floor(countyData.newDeaths / denominator);\n\n            this.checkMax(countyData, \"totalConfirmedPerCapita\");\n            this.checkMax(countyData, \"totalDeathsPerCapita\");\n            this.checkMax(countyData, \"newConfirmedPerCapita\");\n            this.checkMax(countyData, \"newDeathsPerCapita\");\n          }\n\n          if (this.covid19!.days[d] == null) {\n            this.covid19!.days[d] = {\n              national: {} as Metrics<number>,\n              data: {} as DailyDatum,\n            } as DailyData;\n          }\n          this.covid19!.days[d].data[i.countyFIPS] = countyData;\n        }\n      });\n\n      this.covid19.days.forEach((d, i) => {\n        d.national = Object.keys(d.data).reduce((res, cKey) => {\n          const countyData = d.data[cKey];\n\n          res.totalConfirmed = (res.totalConfirmed || 0) + countyData.totalConfirmed;\n          res.totalDeaths = (res.totalDeaths || 0) + countyData.totalDeaths;\n          res.newConfirmed = (res.newConfirmed || 0) + countyData.newConfirmed;\n          res.newDeaths = (res.newDeaths || 0) + countyData.newDeaths;\n\n          const yesterdayConfirmed = res.totalConfirmed - res.newConfirmed;\n          res.totalConfirmedGrowthToday = yesterdayConfirmed === 0 ? 0 : Math.floor((res.newConfirmed / yesterdayConfirmed) * 100 * 100) / 100;\n\n          const yesterdayDeaths = res.totalDeaths - res.newDeaths;\n          res.totalDeathsGrowthToday = yesterdayDeaths === 0 ? 0 : Math.floor((res.newDeaths / yesterdayDeaths) * 100 * 100) / 100;\n\n          const window = this.getWindow(i).map((d) => d.data[cKey]);\n          countyData.newConfirmedAverage = Math.floor(window.reduce((sum, c) => sum + c.newConfirmed, 0) / window.length);\n          countyData.newDeathsAverage = Math.floor(window.reduce((sum, c) => sum + c.newDeaths, 0) / window.length);\n          countyData.totalConfirmedGrowthTodayAverage = Math.floor(window.reduce((sum, c) => sum + c.totalConfirmedGrowthToday, 0) / window.length);\n          countyData.totalDeathsGrowthTodayAverage = Math.floor(window.reduce((sum, c) => sum + c.totalDeathsGrowthToday, 0) / window.length);\n\n          this.checkMax(countyData, \"newConfirmedAverage\");\n          this.checkMax(countyData, \"newDeathsAverage\");\n          this.checkMax(countyData, \"totalConfirmedGrowthTodayAverage\");\n          this.checkMax(countyData, \"totalDeathsGrowthTodayAverage\");\n\n          const countySummary = this.covid19!.counties[cKey];\n          if (countySummary.population !== null) {\n            countyData.newConfirmedPerCapitaAverage = Math.floor(window.reduce((sum, c) => sum + c.newConfirmedPerCapita!, 0) / window.length);\n            countyData.newDeathsPerCapitaAverage = Math.floor(window.reduce((sum, c) => sum + c.newDeathsPerCapita!, 0) / window.length);\n\n            this.checkMax(countyData, \"newConfirmedPerCapitaAverage\");\n            this.checkMax(countyData, \"newDeathsPerCapitaAverage\");\n          }\n\n          return res;\n        }, {} as Metrics<number>);\n      });\n\n      this.covid19!.days.forEach((d, i) => {\n        if (i > 0) {\n          const totalConfirmedGrowthYesterday = this.covid19!.days[i - 1].national.totalConfirmedGrowthToday;\n          d.national.totalConfirmedGrowthRate =\n            totalConfirmedGrowthYesterday === 0 ? 0 : Math.floor((d.national.totalConfirmedGrowthToday / totalConfirmedGrowthYesterday) * 100 * 100) / 100;\n\n          const totalDeathsGrowthYesterday = this.covid19!.days[i - 1].national.totalDeathsGrowthToday;\n          d.national.totalDeathsGrowthRate =\n            totalDeathsGrowthYesterday === 0 ? 0 : Math.floor((d.national.totalDeathsGrowthToday / totalDeathsGrowthYesterday) * 100 * 100) / 100;\n        }\n\n        const window = this.getWindow(i).map((d) => d.national);\n        d.national.newConfirmedAverage = Math.floor(window.reduce((sum, n) => sum + n.newConfirmed, 0) / window.length);\n        d.national.newDeathsAverage = Math.floor(window.reduce((sum, n) => sum + n.newDeaths, 0) / window.length);\n        d.national.totalConfirmedGrowthTodayAverage = Math.floor(window.reduce((sum, c) => sum + c.totalConfirmedGrowthToday, 0) / window.length);\n        d.national.totalDeathsGrowthTodayAverage = Math.floor(window.reduce((sum, c) => sum + c.totalDeathsGrowthToday, 0) / window.length);\n      });\n    });\n  }\n\n  getWindow(index: number): DailyData[] {\n    const start = Math.max(0, index - 3);\n    const end = Math.min(this.covid19!.days.length, index + 4);\n    return this.covid19!.days.slice(start, end);\n  }\n\n  generateLegends(): Metrics<Legend> {\n    const legends = Object.keys(this.max).reduce((res, k) => {\n      if (k.indexOf(\"GrowthToday\") > 0) {\n        res[k as Metric] = new Legend([\n          new LegendItem(0, this.regularShades[0], 0, 0, true),\n          new LegendItem(1, this.regularShades[1], 1, 16, true),\n          new LegendItem(2, this.regularShades[2], 17, 32, true),\n          new LegendItem(3, this.regularShades[3], 33, 48, true),\n          new LegendItem(4, this.regularShades[4], 49, 64, true),\n          new LegendItem(5, this.regularShades[5], 65, 80, true),\n          new LegendItem(6, this.regularShades[6], 81, 99, true),\n          new LegendItem(7, this.regularShades[7], 100, null, true),\n        ]);\n      } else if (k.indexOf(\"GrowthRate\") > 0) {\n        res[k as Metric] = new Legend([\n          new LegendItem(0, this.growthRateShades[0], 0, 0, true),\n          new LegendItem(1, this.growthRateShades[1], 1, 33, true),\n          new LegendItem(2, this.growthRateShades[2], 34, 66, true),\n          new LegendItem(3, this.growthRateShades[3], 67, 99, true),\n          new LegendItem(4, this.growthRateShades[4], 100, 100, true),\n          new LegendItem(5, this.growthRateShades[5], 101, 133, true),\n          new LegendItem(6, this.growthRateShades[6], 134, 166, true),\n          new LegendItem(7, this.growthRateShades[7], 167, 199, true),\n          new LegendItem(7, this.growthRateShades[8], 200, null, true),\n        ]);\n      } else {\n        const slider = new LogarithmicSlider(this.regularShades.length, this.max[k as Metric]!);\n        const legendItems = this.regularShades.map((s, i) => new LegendItem(i, s, i === 0 ? 0 : slider.getValue(i - 1) + 1, slider.getValue(i), true));\n        res[k as Metric] = new Legend(legendItems);\n      }\n      return res;\n    }, {} as Metrics<Legend>);\n\n    return legends;\n  }\n}\n\ndeclare global {\n  interface Window {\n    initMap: () => void;\n    covid19: Covid19;\n  }\n}\n\nwindow.initMap = function initMap(): void {\n  const covid19 = new Covid19(\"map\");\n  window.covid19 = covid19;\n  covid19.initialize();\n};\n","import { Color, Metric, Metrics, Covid19Data } from \"./types\";\nimport { Legend } from \"./legend\";\n\nexport default class Map {\n  private map: google.maps.Map;\n  private infoWindow: google.maps.InfoWindow;\n  private currentDayIndex = 0;\n  private minPopulation?: number;\n  private maxPopulation?: number;\n  private animationId: NodeJS.Timeout | null = null;\n  private startDate = new Date(2020, 0, 22);\n\n  private shades: Color[] = [\n    { code: \"F2F0F7\", on: true },\n    { code: \"DADAEB\", on: true },\n    { code: \"BCBDDC\", on: true },\n    { code: \"9E9AC8\", on: true },\n    { code: \"807DBA\", on: true },\n    { code: \"6A51A3\", on: true },\n    { code: \"4A1486\", on: true },\n    { code: \"333333\", on: true },\n  ];\n\n  constructor(private mapId: string, private metric: Metric, private data: Covid19Data, private max: Metrics<number>, private legends: Metrics<Legend>) {\n    this.currentDayIndex = data.days.length - 1;\n\n    this.map = new google.maps.Map(document.getElementById(this.mapId) as Element, {\n      zoom: 4,\n      center: { lat: 38.95809, lng: -95.26726 },\n    });\n    this.map.data.loadGeoJson(\"./data/gz_2010_us_050_00_20m.json\");\n    this.infoWindow = new google.maps.InfoWindow();\n\n    this.map.data.addListener(\"click\", (evt: google.maps.Data.MouseEvent) => {\n      this.showCountyDetails(evt);\n    });\n\n    this.handleMetric();\n    this.handleAnimation();\n    this.handleToggles();\n    this.handlePopulation();\n\n    this.styleMap();\n  }\n\n  handlePopulation(): void {\n    const minPopulation = $(\"#minPopulation\");\n    minPopulation.on(\"change\", () => {\n      const val = minPopulation.val();\n      this.minPopulation = val === \"\" ? undefined : (val as number) * 1000;\n\n      this.styleMap();\n    });\n\n    const maxPopulation = $(\"#maxPopulation\");\n    maxPopulation.on(\"change\", () => {\n      const val = maxPopulation.val();\n      this.maxPopulation = val === \"\" ? undefined : (val as number) * 1000;\n\n      this.styleMap();\n    });\n  }\n\n  handleToggles(): void {\n    $(\"#legend\").on(\"click\", \".legend-value\", (evt) => {\n      const target = $(evt.currentTarget);\n      const position = target.data(\"position\");\n\n      this.legends[this.metric]!.toggleItem(position);\n      target.toggleClass(\"on\");\n\n      this.styleMap();\n    });\n  }\n\n  handleAnimation(): void {\n    const adjust = (day: number): void => {\n      if (day >= 0 && day <= this.data.days.length - 1) {\n        this.currentDayIndex = day;\n        this.styleMap();\n      }\n    };\n    $(\"#rewind-all\").on(\"click\", () => adjust(0));\n    $(\"#rewind-1\").on(\"click\", () => adjust(this.currentDayIndex - 1));\n    $(\"#fast-forward-1\").on(\"click\", () => adjust(this.currentDayIndex + 1));\n    $(\"#toggle\").on(\"click\", () => {\n      if (this.animationId == null) {\n        $(\"#toggle\").removeClass(\"play\").addClass(\"pause\");\n        const update = (): void => {\n          this.animationId = setTimeout(() => {\n            if (this.currentDayIndex < this.data.days.length - 1) {\n              adjust(this.currentDayIndex + 1);\n              update();\n            } else {\n              $(\"#toggle\").click();\n            }\n          }, 50);\n        };\n\n        update();\n      } else {\n        $(\"#toggle\").removeClass(\"pause\").addClass(\"play\");\n        clearTimeout(this.animationId);\n        this.animationId = null;\n      }\n    });\n    $(\"#fast-forward-all\").on(\"click\", () => adjust(this.data.days.length - 1));\n  }\n\n  displayDate(): void {\n    const date = new Date(this.startDate.getFullYear(), this.startDate.getMonth(), this.startDate.getDate());\n    date.setDate(date.getDate() + this.currentDayIndex);\n    $(\"#currentDate\").text(date.toLocaleDateString(\"en-US\"));\n\n    const isGrowth = this.metric.indexOf(\"Growth\") >= 0;\n    const national = this.data.days[this.currentDayIndex].national[this.metric];\n\n    if (national == null) {\n      $(\"#nationValue\").text(\"\");\n      $(\"#national\").hide();\n    } else {\n      $(\"#nationalValue\").text(\n        (isGrowth ? national : national.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")) + (this.metric.indexOf(\"Growth\") >= 0 ? \"%\" : \"\")\n      );\n      $(\"#national\").show();\n    }\n  }\n\n  handleMetric(): void {\n    const $metric = $(\"#metric\");\n    $metric.on(\"change\", () => {\n      this.metric = $metric.val() as Metric;\n      this.styleMap();\n    });\n  }\n\n  showCountyDetails(evt: google.maps.Data.MouseEvent): void {\n    const geoId = this.getGeoId(evt.feature);\n\n    const countyData = this.data.days[this.currentDayIndex].data[geoId];\n    const county = this.data.counties[geoId];\n\n    const html = `\n<div><b>${county.county}, ${county.stateAbbr}</b></div>\n<div>Population:  ${county.population.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")}</div>\n<p>Day ${this.currentDayIndex}</p>\n<p></p>\n<p>\n    New Confirmed: ${countyData.newConfirmed}\n    <br />\n    ${countyData.newConfirmedPerCapita} per million\n</p>\n<p>\n    Total Confirmed: ${countyData.totalConfirmed}\n    <br />\n    ${countyData.totalConfirmedPerCapita} per million\n    <br />\n    ${countyData.totalConfirmedGrowthToday}% growth from yesterday\n    <br />\n    ${countyData.totalConfirmedGrowthRate}% growth change from yesterday\n</p>\n<p></p>\n<p>\n    New Deaths: ${countyData.newDeaths}\n    <br />\n    ${countyData.newDeathsPerCapita} per million\n</p>\n<p>\n    Total Deaths: ${countyData.totalDeaths}\n    <br />\n    ${countyData.totalDeathsPerCapita} per million\n    <br />\n    ${countyData.totalDeathsGrowthToday}% growth from yesterday\n    <br />\n    ${countyData.totalDeathsGrowthRate}% growth change from yesterday\n</p>\n  `;\n\n    this.infoWindow!.setContent(html);\n    this.infoWindow!.setPosition(evt.latLng);\n    this.infoWindow!.setOptions({ pixelOffset: new google.maps.Size(0, -34) });\n    this.infoWindow!.open(this.map!);\n  }\n\n  getGeoId(feature: google.maps.Data.Feature): string {\n    return feature.getProperty(\"GEOID\");\n  }\n\n  styleMap(): void {\n    this.displayDate();\n    const day = this.currentDayIndex;\n\n    if (day == 0) {\n      $(\"#rewind-1,#rewind-all\").addClass(\"disabled\");\n    } else {\n      $(\"#rewind-1,#rewind-all\").removeClass(\"disabled\");\n    }\n\n    if (day == this.data.days.length - 1) {\n      $(\"#fast-forward-1,#fast-forward-all,#toggle\").addClass(\"disabled\");\n    } else {\n      $(\"#fast-forward-1,#fast-forward-all,#toggle\").removeClass(\"disabled\");\n    }\n\n    this.displayLegend();\n    this.map!.data.setStyle((feature) => this.styleFeature(feature));\n  }\n\n  styleFeature(feature: google.maps.Data.Feature): google.maps.Data.StyleOptions {\n    const geoId = this.getGeoId(feature);\n    const countyData = this.data.days[this.currentDayIndex].data[geoId];\n    const county = this.data.counties[geoId];\n\n    let bucket = \"white\";\n    if (countyData != null) {\n      const value = countyData[this.metric] || 0;\n      const shade = this.legends[this.metric]!.getPosition(value);\n\n      if (shade.isOn()) {\n        if (\n          (this.minPopulation == null || this.minPopulation <= county.population) &&\n          (this.maxPopulation == null || this.maxPopulation >= county.population)\n        ) {\n          bucket = \"#\" + shade.getColor();\n        }\n      }\n    }\n\n    return {\n      fillColor: bucket,\n      strokeWeight: 1,\n      strokeColor: \"#CCCCCC\",\n      fillOpacity: 0.75,\n    };\n  }\n\n  displayLegend(): void {\n    const legend = this.legends[this.metric];\n    $(\"#legend\").html(legend!.getHTML());\n  }\n}\n","export default class LogarithmicSlider {\n  private minp: number;\n  private maxp: number;\n  private minv: number;\n  private maxv: number;\n  private scale: number;\n\n  constructor(private buckets: number, private max: number) {\n    this.minp = 0;\n    this.maxp = buckets - 1;\n    this.minv = 0;\n    this.maxv = Math.log(max);\n    this.scale = (this.maxv - this.minv) / (this.maxp - this.minp);\n  }\n  getPosition(value: number): number {\n    if (value <= 0) {\n      return 0;\n    }\n    let position = Math.ceil((Math.log(value) - this.minv) / this.scale + this.minp);\n    if (position === 0 && value > 0) {\n      position = 1;\n    }\n    return position;\n  }\n  getValue(position: number): number {\n    let value = Math.round(Math.exp(this.minv + this.scale * (position - this.minp)));\n    if (position === 0 && value > 0) {\n      value = 0;\n    }\n    return value;\n  }\n}\n","export class LegendItem {\n  constructor(private position: number, private color: string, private min: number | null, private max: number | null, private on: boolean) {}\n\n  toggle(): void {\n    this.on = !this.on;\n  }\n\n  isOn(): boolean {\n    return this.on;\n  }\n\n  generateLegend(): string {\n    let text = `${this.min} to ${this.max}`;\n    if (this.min === this.max) {\n      text = `${this.min}`;\n    } else if (this.min === null) {\n      text = `<= ${this.max}`;\n    } else if (this.max === null) {\n      text = `>= ${this.min}`;\n    }\n\n    return `\n<div class='col-6 col-sm-3'>\n  <div data-position=\"${this.position}\" class=\"legend-value ${this.on ? \"on\" : \"\"}\" style=\"background-color: #${this.color}\">\n    <div>${text}</div>\n  </div>\n</div>\n    `;\n  }\n\n  isInRange(value: number): boolean {\n    return (this.min === null || value >= this.min) && (this.max === null || value <= this.max);\n  }\n  getColor(): string {\n    return this.color;\n  }\n}\n\nexport class Legend {\n  constructor(private items: LegendItem[]) {}\n\n  toggleItem(position: number): void {\n    this.items[position].toggle();\n  }\n\n  getHTML(): string {\n    let html = \"\";\n\n    html += \"<div>\";\n    html += \"<div class='row align-items-center no-gutters'>\";\n\n    this.items.forEach((i) => (html += i.generateLegend()));\n\n    html += \"</div>\";\n    html += \"</div>\";\n\n    return html;\n  }\n\n  isOn(position: number): boolean {\n    return this.items[position].isOn();\n  }\n\n  getPosition(value: number): LegendItem {\n    return this.items.find((i) => i.isInRange(value))!;\n  }\n}\n"],"sourceRoot":""}