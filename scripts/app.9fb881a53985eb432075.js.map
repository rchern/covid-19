{"version":3,"sources":["webpack:///./src/scripts/script.ts","webpack:///./src/scripts/map.ts","webpack:///./src/scripts/logSlider.ts","webpack:///./src/scripts/legend.ts"],"names":["Covid19","mapId","population","regularShades","growthRateShades","this","max","newDeaths","totalDeaths","newConfirmed","totalConfirmed","newDeathsPerCapita","totalDeathsPerCapita","newConfirmedPerCapita","totalConfirmedPerCapita","totalConfirmedGrowthToday","totalDeathsGrowthToday","totalConfirmedGrowthRate","totalDeathsGrowthRate","$","when","fetchData","done","legends","generateLegends","map","covid19","styleMap","fetchPopulationData","then","fetchCovid19Data","getJSON","data","countyData","metric","days","confirmed","length","counties","forEach","i","countyFIPS","deaths","countySummary","county","stateAbbr","d","totalConfirmed2Ago","totalDeaths2Ago","totalConfirmedYesterday","totalDeathsYesterday","totalConfirmedToday","totalDeathsToday","newConfirmedToday","newDeathsToday","newConfirmedYesterday","newDeathsYesterday","confirmedGrowthToday","Math","floor","deathsGrowthToday","confirmedGrowthYesterday","deathsGrowthYesterday","confirmedGrowthComparison","deathsGrowthComparison","checkMax","denominator","national","Object","keys","reduce","res","cKey","yesterdayConfirmed","yesterdayDeaths","totalConfirmedGrowthYesterday","totalDeathsGrowthYesterday","k","Legend","LegendItem","slider","legendItems","s","getValue","window","initMap","initialize","currentDayIndex","animationId","startDate","Date","shades","code","on","google","maps","Map","document","getElementById","zoom","center","lat","lng","loadGeoJson","infoWindow","InfoWindow","addListener","evt","showCountyDetails","handleMetric","handleAnimation","handleToggles","handlePopulation","minPopulation","val","undefined","maxPopulation","target","currentTarget","position","toggleItem","toggleClass","adjust","day","removeClass","addClass","update","setTimeout","click","clearTimeout","date","getFullYear","getMonth","getDate","setDate","text","toLocaleDateString","isGrowth","indexOf","hide","toString","replace","show","$metric","geoId","getGeoId","feature","html","setContent","setPosition","latLng","setOptions","pixelOffset","Size","open","getProperty","displayDate","displayLegend","setStyle","styleFeature","bucket","value","shade","getPosition","isOn","getColor","fillColor","strokeWeight","strokeColor","fillOpacity","legend","getHTML","buckets","minp","maxp","minv","maxv","log","scale","ceil","round","exp","color","min","items","toggle","generateLegend","find","isInRange"],"mappings":"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","file":"scripts/app.9fb881a53985eb432075.js","sourcesContent":["import \"../styles/style.scss\";\nimport {\n  CountySummary,\n  Covid19Data,\n  Metric,\n  Metrics,\n  Population,\n  USAFactsCounty,\n  DailyData,\n  DailyDatum,\n} from \"./types\";\nimport Map from \"./map\";\nimport LogarithmicSlider from \"./logSlider\";\nimport { Legend, LegendItem } from \"./legend\";\n\nclass Covid19 {\n  private covid19?: Covid19Data;\n  private legends?: Metrics<Legend>;\n  private population: Population = {};\n  private max: Metrics<number>;\n\n  private regularShades: string[] = [\n    \"FFFFFF\",\n    \"F2F0F7\",\n    \"DADAEB\",\n    \"BCBDDC\",\n    \"9E9AC8\",\n    \"807DBA\",\n    \"6A51A3\",\n    \"4A1486\",\n  ];\n  private growthRateShades: string[] = [\n    \"FFFFFF\",\n    \"31A354\",\n    \"A1D99B\",\n    \"E5F5E0\",\n    \"FFF7BC\",\n    \"FEE0D2\",\n    \"FC9272\",\n    \"DE2D26\",\n    \"333333\",\n  ];\n  //private growthShades: string[] = [ \"31A354\", \"A1D99B\", \"E5F5E0\", \"white\", \"FEE0D2\", \"FC9272\", \"DE2D26\"];\n\n  private map?: Map;\n\n  constructor(private mapId: string) {\n    this.max = {\n      newDeaths: 0,\n      totalDeaths: 0,\n      newConfirmed: 0,\n      totalConfirmed: 0,\n\n      newDeathsPerCapita: 0,\n      totalDeathsPerCapita: 0,\n      newConfirmedPerCapita: 0,\n      totalConfirmedPerCapita: 0,\n\n      totalConfirmedGrowthToday: 0,\n      totalDeathsGrowthToday: 0,\n\n      totalConfirmedGrowthRate: 0,\n      totalDeathsGrowthRate: 0,\n    };\n  }\n\n  initialize(): void {\n    $.when(this.fetchData()).done(() => {\n      this.legends = this.generateLegends();\n      this.map = new Map(\n        this.mapId,\n        \"totalConfirmed\",\n        this.covid19!,\n        this.max!,\n        this.legends\n      );\n      this.map!.styleMap();\n    });\n  }\n\n  fetchData(): JQuery.Thenable<USAFactsCounty[]> {\n    return $.when(this.fetchPopulationData()).then(() =>\n      this.fetchCovid19Data()\n    );\n    // await this.fetchPopulationData();\n    // return await this.fetchCovid19Data();\n  }\n\n  fetchPopulationData(): JQuery.jqXHR<Population> {\n    return $.getJSON(\"./data/population.json\").done((data: Population) => {\n      this.population = data;\n    });\n  }\n\n  checkMax(countyData: Metrics<number>, metric: Metric): void {\n    const max = countyData[metric] || 0;\n    if (max > (this.max[metric] || 0)) {\n      this.max[metric] = max;\n    }\n  }\n\n  fetchCovid19Data(): JQuery.jqXHR<USAFactsCounty[]> {\n    return $.getJSON(\n      \"https://usafactsstatic.blob.core.windows.net/public/2020/coronavirus-timeline/allData.json\"\n    ).done((data: USAFactsCounty[]) => {\n      const days = data[0].confirmed.length;\n\n      this.covid19 = { counties: {}, days: [] };\n      data.forEach((i) => {\n        if (\n          i.countyFIPS === \"00\" ||\n          i.deaths[days - 1] > i.confirmed[days - 1]\n        ) {\n          return;\n        }\n\n        const countySummary: CountySummary = {\n          county: i.county,\n          stateAbbr: i.stateAbbr,\n          population: this.population[i.countyFIPS],\n        };\n\n        this.covid19!.counties[i.countyFIPS] = countySummary;\n\n        for (let d = 0; d < days; d++) {\n          const totalConfirmed2Ago = d <= 1 ? 0 : i.confirmed[d - 2];\n          const totalDeaths2Ago = d <= 1 ? 0 : i.deaths[d - 2];\n\n          let totalConfirmedYesterday = d === 0 ? 0 : i.confirmed[d - 1];\n          let totalDeathsYesterday = d === 0 ? 0 : i.deaths[d - 1];\n\n          if (totalConfirmedYesterday < totalConfirmed2Ago) {\n            totalConfirmedYesterday = totalConfirmed2Ago;\n          }\n          if (totalDeathsYesterday < totalDeaths2Ago) {\n            totalDeathsYesterday = totalDeaths2Ago;\n          }\n\n          let totalConfirmedToday = i.confirmed[d];\n          let totalDeathsToday = i.deaths[d];\n\n          if (totalConfirmedToday < totalConfirmedYesterday) {\n            totalConfirmedToday = totalConfirmedYesterday;\n          }\n          if (totalDeathsToday < totalDeathsYesterday) {\n            totalDeathsToday = totalDeathsYesterday;\n          }\n\n          const newConfirmedToday =\n            totalConfirmedToday - totalConfirmedYesterday;\n          const newDeathsToday = totalDeathsToday - totalDeathsYesterday;\n\n          const newConfirmedYesterday =\n            totalConfirmedYesterday - totalConfirmed2Ago;\n          const newDeathsYesterday = totalDeathsYesterday - totalDeaths2Ago;\n\n          const confirmedGrowthToday =\n            totalConfirmedYesterday === 0\n              ? 0\n              : Math.floor((newConfirmedToday / totalConfirmedYesterday) * 100);\n          const deathsGrowthToday =\n            totalDeathsYesterday === 0\n              ? 0\n              : Math.floor((newDeathsToday / totalDeathsYesterday) * 100);\n\n          const confirmedGrowthYesterday =\n            totalConfirmed2Ago === 0\n              ? 0\n              : Math.floor((newConfirmedYesterday / totalConfirmed2Ago) * 100);\n          const deathsGrowthYesterday =\n            totalDeaths2Ago === 0\n              ? 0\n              : Math.floor((newDeathsYesterday / totalDeaths2Ago) * 100);\n\n          const confirmedGrowthComparison =\n            confirmedGrowthYesterday === 0\n              ? 0\n              : Math.floor(\n                  (confirmedGrowthToday / confirmedGrowthYesterday) * 100\n                );\n          const deathsGrowthComparison =\n            deathsGrowthYesterday === 0\n              ? 0\n              : Math.floor((deathsGrowthToday / deathsGrowthYesterday) * 100);\n\n          const countyData: Metrics<number> = {\n            totalConfirmed: totalConfirmedToday,\n            totalDeaths: totalDeathsToday,\n\n            newConfirmed: newConfirmedToday,\n            newDeaths: newDeathsToday,\n\n            totalConfirmedGrowthToday:\n              Math.floor(confirmedGrowthToday * 100) / 100,\n            totalDeathsGrowthToday: Math.floor(deathsGrowthToday * 100) / 100,\n\n            totalConfirmedGrowthRate:\n              Math.floor(confirmedGrowthComparison * 100) / 100,\n            totalDeathsGrowthRate:\n              Math.floor(deathsGrowthComparison * 100) / 100,\n          };\n\n          this.checkMax(countyData, \"totalConfirmed\");\n          this.checkMax(countyData, \"totalDeaths\");\n          this.checkMax(countyData, \"newConfirmed\");\n          this.checkMax(countyData, \"newDeaths\");\n\n          if (countySummary.population !== null) {\n            const denominator = countySummary.population / 1000000;\n\n            countyData.totalConfirmedPerCapita = Math.floor(\n              countyData.totalConfirmed / denominator\n            );\n            countyData.totalDeathsPerCapita = Math.floor(\n              countyData.totalDeaths / denominator\n            );\n\n            countyData.newConfirmedPerCapita = Math.floor(\n              countyData.newConfirmed / denominator\n            );\n            countyData.newDeathsPerCapita = Math.floor(\n              countyData.newDeaths / denominator\n            );\n\n            this.checkMax(countyData, \"totalConfirmedPerCapita\");\n            this.checkMax(countyData, \"totalDeathsPerCapita\");\n            this.checkMax(countyData, \"newConfirmedPerCapita\");\n            this.checkMax(countyData, \"newDeathsPerCapita\");\n          }\n\n          if (this.covid19!.days[d] == null) {\n            this.covid19!.days[d] = {\n              national: {} as Metrics<number>,\n              data: {} as DailyDatum,\n            } as DailyData;\n          }\n          this.covid19!.days[d].data[i.countyFIPS] = countyData;\n        }\n      });\n\n      this.covid19.days.forEach((d) => {\n        d.national = Object.keys(d.data).reduce((res, cKey) => {\n          const countyData = d.data[cKey];\n\n          res.totalConfirmed =\n            (res.totalConfirmed || 0) + countyData.totalConfirmed;\n          res.totalDeaths = (res.totalDeaths || 0) + countyData.totalDeaths;\n          res.newConfirmed = (res.newConfirmed || 0) + countyData.newConfirmed;\n          res.newDeaths = (res.newDeaths || 0) + countyData.newDeaths;\n\n          const yesterdayConfirmed = res.totalConfirmed - res.newConfirmed;\n          res.totalConfirmedGrowthToday =\n            yesterdayConfirmed === 0\n              ? 0\n              : Math.floor(\n                  (res.newConfirmed / yesterdayConfirmed) * 100 * 100\n                ) / 100;\n\n          const yesterdayDeaths = res.totalDeaths - res.newDeaths;\n          res.totalDeathsGrowthToday =\n            yesterdayDeaths === 0\n              ? 0\n              : Math.floor((res.newDeaths / yesterdayDeaths) * 100 * 100) / 100;\n\n          return res;\n        }, {} as Metrics<number>);\n      });\n\n      this.covid19!.days.forEach((d, i) => {\n        if (i > 0) {\n          const totalConfirmedGrowthYesterday = this.covid19!.days[i - 1]\n            .national.totalConfirmedGrowthToday;\n          d.national.totalConfirmedGrowthRate =\n            totalConfirmedGrowthYesterday === 0\n              ? 0\n              : Math.floor(\n                  (d.national.totalConfirmedGrowthToday /\n                    totalConfirmedGrowthYesterday) *\n                    100 *\n                    100\n                ) / 100;\n\n          const totalDeathsGrowthYesterday = this.covid19!.days[i - 1].national\n            .totalDeathsGrowthToday;\n          d.national.totalDeathsGrowthRate =\n            totalDeathsGrowthYesterday === 0\n              ? 0\n              : Math.floor(\n                  (d.national.totalDeathsGrowthToday /\n                    totalDeathsGrowthYesterday) *\n                    100 *\n                    100\n                ) / 100;\n        }\n      });\n    });\n  }\n\n  generateLegends(): Metrics<Legend> {\n    const legends = Object.keys(this.max).reduce((res, k) => {\n      if (k === \"totalConfirmedGrowthToday\" || k === \"totalDeathsGrowthToday\") {\n        res[k as Metric] = new Legend([\n          new LegendItem(0, this.regularShades[0], 0, 0, true),\n          new LegendItem(1, this.regularShades[1], 1, 16, true),\n          new LegendItem(2, this.regularShades[2], 17, 32, true),\n          new LegendItem(3, this.regularShades[3], 33, 48, true),\n          new LegendItem(4, this.regularShades[4], 49, 64, true),\n          new LegendItem(5, this.regularShades[5], 65, 80, true),\n          new LegendItem(6, this.regularShades[6], 81, 99, true),\n          new LegendItem(7, this.regularShades[7], 100, null, true),\n        ]);\n      } else if (\n        k === \"totalConfirmedGrowthRate\" ||\n        k === \"totalDeathsGrowthRate\"\n      ) {\n        res[k as Metric] = new Legend([\n          new LegendItem(0, this.growthRateShades[0], 0, 0, true),\n          new LegendItem(1, this.growthRateShades[1], 1, 33, true),\n          new LegendItem(2, this.growthRateShades[2], 34, 66, true),\n          new LegendItem(3, this.growthRateShades[3], 67, 99, true),\n          new LegendItem(4, this.growthRateShades[4], 100, 100, true),\n          new LegendItem(5, this.growthRateShades[5], 101, 133, true),\n          new LegendItem(6, this.growthRateShades[6], 134, 166, true),\n          new LegendItem(7, this.growthRateShades[7], 167, 199, true),\n          new LegendItem(7, this.growthRateShades[8], 200, null, true),\n        ]);\n      } else {\n        const slider = new LogarithmicSlider(\n          this.regularShades.length,\n          this.max[k as Metric]!\n        );\n        const legendItems = this.regularShades.map(\n          (s, i) =>\n            new LegendItem(\n              i,\n              s,\n              i === 0 ? 0 : slider.getValue(i - 1) + 1,\n              slider.getValue(i),\n              true\n            )\n        );\n        res[k as Metric] = new Legend(legendItems);\n      }\n      return res;\n    }, {} as Metrics<Legend>);\n\n    return legends;\n  }\n}\n\ndeclare global {\n  interface Window {\n    initMap: () => void;\n    covid19: Covid19;\n  }\n}\n\nwindow.initMap = function initMap(): void {\n  const covid19 = new Covid19(\"map\");\n  window.covid19 = covid19;\n  covid19.initialize();\n};\n","import { Color, Metric, Metrics, Covid19Data } from \"./types\";\nimport { Legend } from \"./legend\";\n\nexport default class Map {\n  private map: google.maps.Map;\n  private infoWindow: google.maps.InfoWindow;\n  private currentDayIndex = 0;\n  private minPopulation?: number;\n  private maxPopulation?: number;\n  private animationId: NodeJS.Timeout | null = null;\n  private startDate = new Date(2020, 0, 22);\n\n  private shades: Color[] = [\n    { code: \"F2F0F7\", on: true },\n    { code: \"DADAEB\", on: true },\n    { code: \"BCBDDC\", on: true },\n    { code: \"9E9AC8\", on: true },\n    { code: \"807DBA\", on: true },\n    { code: \"6A51A3\", on: true },\n    { code: \"4A1486\", on: true },\n    { code: \"333333\", on: true },\n  ];\n\n  constructor(\n    private mapId: string,\n    private metric: Metric,\n    private data: Covid19Data,\n    private max: Metrics<number>,\n    private legends: Metrics<Legend>\n  ) {\n    this.currentDayIndex = data.days.length - 1;\n\n    this.map = new google.maps.Map(\n      document.getElementById(this.mapId) as Element,\n      {\n        zoom: 4,\n        center: { lat: 38.95809, lng: -95.26726 },\n      }\n    );\n    this.map.data.loadGeoJson(\"./data/gz_2010_us_050_00_20m.json\");\n    this.infoWindow = new google.maps.InfoWindow();\n\n    this.map.data.addListener(\"click\", (evt: google.maps.Data.MouseEvent) => {\n      this.showCountyDetails(evt);\n    });\n\n    this.handleMetric();\n    this.handleAnimation();\n    this.handleToggles();\n    this.handlePopulation();\n\n    this.styleMap();\n  }\n\n  handlePopulation(): void {\n    const minPopulation = $(\"#minPopulation\");\n    minPopulation.on(\"change\", () => {\n      const val = minPopulation.val();\n      this.minPopulation = val === \"\" ? undefined : (val as number) * 1000;\n\n      this.styleMap();\n    });\n\n    const maxPopulation = $(\"#maxPopulation\");\n    maxPopulation.on(\"change\", () => {\n      const val = maxPopulation.val();\n      this.maxPopulation = val === \"\" ? undefined : (val as number) * 1000;\n\n      this.styleMap();\n    });\n  }\n\n  handleToggles(): void {\n    $(\"#legend\").on(\"click\", \".legend-value\", (evt) => {\n      const target = $(evt.currentTarget);\n      const position = target.data(\"position\");\n\n      this.legends[this.metric]!.toggleItem(position);\n      target.toggleClass(\"on\");\n\n      this.styleMap();\n    });\n  }\n\n  handleAnimation(): void {\n    const adjust = (day: number): void => {\n      if (day >= 0 && day <= this.data.days.length - 1) {\n        this.currentDayIndex = day;\n        this.styleMap();\n      }\n    };\n    $(\"#rewind-all\").on(\"click\", () => adjust(0));\n    $(\"#rewind-1\").on(\"click\", () => adjust(this.currentDayIndex - 1));\n    $(\"#fast-forward-1\").on(\"click\", () => adjust(this.currentDayIndex + 1));\n    $(\"#toggle\").on(\"click\", () => {\n      if (this.animationId == null) {\n        $(\"#toggle\").removeClass(\"play\").addClass(\"pause\");\n        const update = (): void => {\n          this.animationId = setTimeout(() => {\n            if (this.currentDayIndex < this.data.days.length - 1) {\n              adjust(this.currentDayIndex + 1);\n              update();\n            } else {\n              $(\"#toggle\").click();\n            }\n          }, 50);\n        };\n\n        update();\n      } else {\n        $(\"#toggle\").removeClass(\"pause\").addClass(\"play\");\n        clearTimeout(this.animationId);\n        this.animationId = null;\n      }\n    });\n    $(\"#fast-forward-all\").on(\"click\", () => adjust(this.data.days.length - 1));\n  }\n\n  displayDate(): void {\n    const date = new Date(\n      this.startDate.getFullYear(),\n      this.startDate.getMonth(),\n      this.startDate.getDate()\n    );\n    date.setDate(date.getDate() + this.currentDayIndex);\n    $(\"#currentDate\").text(date.toLocaleDateString(\"en-US\"));\n\n    const isGrowth = this.metric.indexOf(\"Growth\") >= 0;\n    const national = this.data.days[this.currentDayIndex].national[this.metric];\n\n    if (national == null) {\n      $(\"#nationValue\").text(\"\");\n      $(\"#national\").hide();\n    } else {\n      $(\"#nationalValue\").text(\n        (isGrowth\n          ? national\n          : national.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")) +\n          (this.metric.indexOf(\"Growth\") >= 0 ? \"%\" : \"\")\n      );\n      $(\"#national\").show();\n    }\n  }\n\n  handleMetric(): void {\n    const $metric = $(\"#metric\");\n    $metric.on(\"change\", () => {\n      this.metric = $metric.val() as Metric;\n      this.styleMap();\n    });\n  }\n\n  showCountyDetails(evt: google.maps.Data.MouseEvent): void {\n    const geoId = this.getGeoId(evt.feature);\n\n    const countyData = this.data.days[this.currentDayIndex].data[geoId];\n    const county = this.data.counties[geoId];\n\n    const html = `\n<div><b>${county.county}, ${county.stateAbbr}</b></div>\n<div>Population:  ${county.population\n      .toString()\n      .replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")}</div>\n<p>Day ${this.currentDayIndex}</p>\n<p></p>\n<p>\n    New Confirmed: ${countyData.newConfirmed}\n    <br />\n    ${countyData.newConfirmedPerCapita} per million\n</p>\n<p>\n    Total Confirmed: ${countyData.totalConfirmed}\n    <br />\n    ${countyData.totalConfirmedPerCapita} per million\n    <br />\n    ${countyData.totalConfirmedGrowthToday}% growth from yesterday\n    <br />\n    ${countyData.totalConfirmedGrowthRate}% growth change from yesterday\n</p>\n<p></p>\n<p>\n    New Deaths: ${countyData.newDeaths}\n    <br />\n    ${countyData.newDeathsPerCapita} per million\n</p>\n<p>\n    Total Deaths: ${countyData.totalDeaths}\n    <br />\n    ${countyData.totalDeathsPerCapita} per million\n    <br />\n    ${countyData.totalDeathsGrowthToday}% growth from yesterday\n    <br />\n    ${countyData.totalDeathsGrowthRate}% growth change from yesterday\n</p>\n  `;\n\n    this.infoWindow!.setContent(html);\n    this.infoWindow!.setPosition(evt.latLng);\n    this.infoWindow!.setOptions({ pixelOffset: new google.maps.Size(0, -34) });\n    this.infoWindow!.open(this.map!);\n  }\n\n  getGeoId(feature: google.maps.Data.Feature): string {\n    return feature.getProperty(\"GEOID\");\n  }\n\n  styleMap(): void {\n    this.displayDate();\n    const day = this.currentDayIndex;\n\n    if (day == 0) {\n      $(\"#rewind-1,#rewind-all\").addClass(\"disabled\");\n    } else {\n      $(\"#rewind-1,#rewind-all\").removeClass(\"disabled\");\n    }\n\n    if (day == this.data.days.length - 1) {\n      $(\"#fast-forward-1,#fast-forward-all,#toggle\").addClass(\"disabled\");\n    } else {\n      $(\"#fast-forward-1,#fast-forward-all,#toggle\").removeClass(\"disabled\");\n    }\n\n    this.displayLegend();\n    this.map!.data.setStyle((feature) => this.styleFeature(feature));\n  }\n\n  styleFeature(\n    feature: google.maps.Data.Feature\n  ): google.maps.Data.StyleOptions {\n    const geoId = this.getGeoId(feature);\n    const countyData = this.data.days[this.currentDayIndex].data[geoId];\n    const county = this.data.counties[geoId];\n\n    let bucket = \"white\";\n    if (countyData != null) {\n      const value = countyData[this.metric] || 0;\n      const shade = this.legends[this.metric]!.getPosition(value);\n\n      if (shade.isOn()) {\n        if (\n          (this.minPopulation == null ||\n            this.minPopulation <= county.population) &&\n          (this.maxPopulation == null ||\n            this.maxPopulation >= county.population)\n        ) {\n          bucket = \"#\" + shade.getColor();\n        }\n      }\n    }\n\n    return {\n      fillColor: bucket,\n      strokeWeight: 1,\n      strokeColor: \"#CCCCCC\",\n      fillOpacity: 0.75,\n    };\n  }\n\n  displayLegend(): void {\n    const legend = this.legends[this.metric];\n    $(\"#legend\").html(legend!.getHTML());\n  }\n}\n","export default class LogarithmicSlider {\n  private minp: number;\n  private maxp: number;\n  private minv: number;\n  private maxv: number;\n  private scale: number;\n\n  constructor(private buckets: number, private max: number) {\n    this.minp = 0;\n    this.maxp = buckets - 1;\n    this.minv = 0;\n    this.maxv = Math.log(max);\n    this.scale = (this.maxv - this.minv) / (this.maxp - this.minp);\n  }\n  getPosition(value: number): number {\n    if (value <= 0) {\n      return 0;\n    }\n    let position = Math.ceil(\n      (Math.log(value) - this.minv) / this.scale + this.minp\n    );\n    if (position === 0 && value > 0) {\n      position = 1;\n    }\n    return position;\n  }\n  getValue(position: number): number {\n    let value = Math.round(\n      Math.exp(this.minv + this.scale * (position - this.minp))\n    );\n    if (position === 0 && value > 0) {\n      value = 0;\n    }\n    return value;\n  }\n}\n","export class LegendItem {\n  constructor(\n    private position: number,\n    private color: string,\n    private min: number | null,\n    private max: number | null,\n    private on: boolean\n  ) {}\n\n  toggle(): void {\n    this.on = !this.on;\n  }\n\n  isOn(): boolean {\n    return this.on;\n  }\n\n  generateLegend(): string {\n    let text = `${this.min} to ${this.max}`;\n    if (this.min === this.max) {\n      text = `${this.min}`;\n    } else if (this.min === null) {\n      text = `<= ${this.max}`;\n    } else if (this.max === null) {\n      text = `>= ${this.min}`;\n    }\n\n    return `\n<div class='col-6 col-sm-3'>\n  <div data-position=\"${this.position}\" class=\"legend-value ${\n      this.on ? \"on\" : \"\"\n    }\" style=\"background-color: #${this.color}\">\n    <div>${text}</div>\n  </div>\n</div>\n    `;\n  }\n\n  isInRange(value: number): boolean {\n    return (\n      (this.min === null || value >= this.min) &&\n      (this.max === null || value <= this.max)\n    );\n  }\n  getColor(): string {\n    return this.color;\n  }\n}\n\nexport class Legend {\n  constructor(private items: LegendItem[]) {}\n\n  toggleItem(position: number): void {\n    this.items[position].toggle();\n  }\n\n  getHTML(): string {\n    let html = \"\";\n\n    html += \"<div>\";\n    html += \"<div class='row align-items-center no-gutters'>\";\n\n    this.items.forEach((i) => (html += i.generateLegend()));\n\n    html += \"</div>\";\n    html += \"</div>\";\n\n    return html;\n  }\n\n  isOn(position: number): boolean {\n    return this.items[position].isOn();\n  }\n\n  getPosition(value: number): LegendItem {\n    return this.items.find((i) => i.isInRange(value))!;\n  }\n}\n"],"sourceRoot":""}