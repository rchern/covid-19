{"version":3,"sources":["webpack:///./src/scripts/script.ts","webpack:///./src/scripts/map.ts","webpack:///./src/scripts/logSlider.ts","webpack:///./src/scripts/legend.ts"],"names":["Covid19","mapId","population","regularShades","growthRateShades","this","max","newDeaths","totalDeaths","newConfirmed","totalConfirmed","newDeathsPerCapita","totalDeathsPerCapita","newConfirmedPerCapita","totalConfirmedPerCapita","totalConfirmedGrowthToday","totalDeathsGrowthToday","totalConfirmedGrowthRate","totalDeathsGrowthRate","$","when","fetchData","done","legends","generateLegends","map","covid19","styleMap","fetchPopulationData","then","fetchCovid19Data","getJSON","data","countyData","metric","days","confirmed","length","counties","forEach","i","countyFIPS","deaths","countySummary","county","stateAbbr","d","totalConfirmed2Ago","totalDeaths2Ago","totalConfirmedYesterday","totalDeathsYesterday","totalConfirmedToday","totalDeathsToday","newConfirmedToday","newDeathsToday","newConfirmedYesterday","newDeathsYesterday","confirmedGrowthToday","Math","floor","deathsGrowthToday","confirmedGrowthYesterday","deathsGrowthYesterday","checkMax","denominator","Object","keys","reduce","res","k","Legend","LegendItem","slider","legendItems","s","getValue","window","initMap","initialize","currentDayIndex","animationId","startDate","Date","shades","code","on","google","maps","Map","document","getElementById","zoom","center","lat","lng","loadGeoJson","infoWindow","InfoWindow","addListener","evt","console","log","showCountyDetails","handleMetric","handleAnimation","handleToggles","handlePopulation","minPopulation","val","undefined","maxPopulation","target","currentTarget","position","toggleItem","toggleClass","adjust","day","removeClass","addClass","update","setTimeout","click","clearTimeout","date","getFullYear","getMonth","getDate","setDate","text","toLocaleDateString","$metric","geoId","getGeoId","feature","html","toString","replace","setContent","setPosition","latLng","setOptions","pixelOffset","Size","open","getProperty","displayDate","displayLegend","setStyle","styleFeature","bucket","value","shade","getPosition","isOn","getColor","fillColor","strokeWeight","strokeColor","fillOpacity","legend","getHTML","buckets","minp","maxp","minv","maxv","scale","ceil","round","exp","color","min","items","toggle","generateLegend","find","isInRange"],"mappings":"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","file":"scripts/app.ee5e5d04dc93a77b13fa.js","sourcesContent":["import \"../styles/style.scss\";\nimport {\n  CountySummary,\n  Covid19Data,\n  Metric,\n  Metrics,\n  Population,\n  USAFactsCounty,\n} from \"./types\";\nimport Map from \"./map\";\nimport LogarithmicSlider from \"./logSlider\";\nimport { Legend, LegendItem } from \"./legend\";\n\nclass Covid19 {\n  private covid19?: Covid19Data;\n  private legends?: Metrics<Legend>;\n  private population: Population = {};\n  private max: Metrics<number>;\n\n  private regularShades: string[] = [\n    \"FFFFFF\",\n    \"F2F0F7\",\n    \"DADAEB\",\n    \"BCBDDC\",\n    \"9E9AC8\",\n    \"807DBA\",\n    \"6A51A3\",\n    \"4A1486\",\n  ];\n  private growthRateShades: string[] = [\n    \"FFFFFF\",\n    \"31A354\",\n    \"A1D99B\",\n    \"E5F5E0\",\n    \"FFF7BC\",\n    \"FEE0D2\",\n    \"FC9272\",\n    \"DE2D26\",\n    \"333333\",\n  ];\n  //private growthShades: string[] = [ \"31A354\", \"A1D99B\", \"E5F5E0\", \"white\", \"FEE0D2\", \"FC9272\", \"DE2D26\"];\n\n  private map?: Map;\n\n  constructor(private mapId: string) {\n    this.max = {\n      newDeaths: 0,\n      totalDeaths: 0,\n      newConfirmed: 0,\n      totalConfirmed: 0,\n\n      newDeathsPerCapita: 0,\n      totalDeathsPerCapita: 0,\n      newConfirmedPerCapita: 0,\n      totalConfirmedPerCapita: 0,\n\n      totalConfirmedGrowthToday: 0,\n      totalDeathsGrowthToday: 0,\n\n      totalConfirmedGrowthRate: 0,\n      totalDeathsGrowthRate: 0,\n    };\n  }\n\n  initialize(): void {\n    $.when(this.fetchData()).done(() => {\n      this.legends = this.generateLegends();\n      this.map = new Map(\n        this.mapId,\n        \"totalConfirmed\",\n        this.covid19!,\n        this.max!,\n        this.legends\n      );\n      this.map!.styleMap();\n    });\n  }\n\n  fetchData(): JQuery.Thenable<USAFactsCounty[]> {\n    return $.when(this.fetchPopulationData()).then(() =>\n      this.fetchCovid19Data()\n    );\n    // await this.fetchPopulationData();\n    // return await this.fetchCovid19Data();\n  }\n\n  fetchPopulationData(): JQuery.jqXHR<Population> {\n    return $.getJSON(\"./data/population.json\").done((data: Population) => {\n      this.population = data;\n    });\n  }\n\n  checkMax(countyData: Metrics<number>, metric: Metric): void {\n    const max = countyData[metric] || 0;\n    if (max > (this.max[metric] || 0)) {\n      this.max[metric] = max;\n    }\n  }\n\n  fetchCovid19Data(): JQuery.jqXHR<USAFactsCounty[]> {\n    return $.getJSON(\n      \"https://usafactsstatic.blob.core.windows.net/public/2020/coronavirus-timeline/allData.json\"\n    ).done((data: USAFactsCounty[]) => {\n      const days = data[0].confirmed.length;\n\n      this.covid19 = { counties: {}, days: [] };\n      data.forEach((i) => {\n        if (\n          i.countyFIPS === \"00\" ||\n          i.deaths[days - 1] > i.confirmed[days - 1]\n        ) {\n          return;\n        }\n\n        const countySummary: CountySummary = {\n          county: i.county,\n          stateAbbr: i.stateAbbr,\n          population: this.population[i.countyFIPS],\n        };\n\n        this.covid19!.counties[i.countyFIPS] = countySummary;\n\n        for (let d = 0; d < days; d++) {\n          const totalConfirmed2Ago = d <= 1 ? 0 : i.confirmed[d - 2];\n          const totalDeaths2Ago = d <= 1 ? 0 : i.deaths[d - 2];\n\n          let totalConfirmedYesterday = d === 0 ? 0 : i.confirmed[d - 1];\n          let totalDeathsYesterday = d === 0 ? 0 : i.deaths[d - 1];\n\n          if (totalConfirmedYesterday < totalConfirmed2Ago) {\n            totalConfirmedYesterday = totalConfirmed2Ago;\n          }\n          if (totalDeathsYesterday < totalDeaths2Ago) {\n            totalDeathsYesterday = totalDeaths2Ago;\n          }\n\n          let totalConfirmedToday = i.confirmed[d];\n          let totalDeathsToday = i.deaths[d];\n\n          if (totalConfirmedToday < totalConfirmedYesterday) {\n            totalConfirmedToday = totalConfirmedYesterday;\n          }\n          if (totalDeathsToday < totalDeathsYesterday) {\n            totalDeathsToday = totalDeathsYesterday;\n          }\n\n          const newConfirmedToday =\n            totalConfirmedToday - totalConfirmedYesterday;\n          const newDeathsToday = totalDeathsToday - totalDeathsYesterday;\n\n          const newConfirmedYesterday =\n            totalConfirmedYesterday - totalConfirmed2Ago;\n          const newDeathsYesterday = totalDeathsYesterday - totalDeaths2Ago;\n\n          const confirmedGrowthToday =\n            totalConfirmedYesterday === 0\n              ? 0\n              : Math.floor((newConfirmedToday / totalConfirmedYesterday) * 100);\n          const deathsGrowthToday =\n            totalDeathsYesterday === 0\n              ? 0\n              : Math.floor((newDeathsToday / totalDeathsYesterday) * 100);\n\n          const confirmedGrowthYesterday =\n            totalConfirmed2Ago === 0\n              ? 0\n              : Math.floor((newConfirmedYesterday / totalConfirmed2Ago) * 100);\n          const deathsGrowthYesterday =\n            totalDeaths2Ago === 0\n              ? 0\n              : Math.floor((newDeathsYesterday / totalDeaths2Ago) * 100);\n\n          const confirmedGrowthComparison =\n            confirmedGrowthYesterday === 0\n              ? 0\n              : Math.floor(\n                  (confirmedGrowthToday / confirmedGrowthYesterday) * 100\n                );\n          const deathsGrowthComparison =\n            deathsGrowthYesterday === 0\n              ? 0\n              : Math.floor((deathsGrowthToday / deathsGrowthYesterday) * 100);\n\n          const countyData: Metrics<number> = {\n            totalConfirmed: totalConfirmedToday,\n            totalDeaths: totalDeathsToday,\n\n            newConfirmed: newConfirmedToday,\n            newDeaths: newDeathsToday,\n\n            totalConfirmedGrowthToday: confirmedGrowthToday,\n            totalDeathsGrowthToday: deathsGrowthToday,\n\n            totalConfirmedGrowthRate: confirmedGrowthComparison,\n            totalDeathsGrowthRate: deathsGrowthComparison,\n          };\n\n          this.checkMax(countyData, \"totalConfirmed\");\n          this.checkMax(countyData, \"totalDeaths\");\n          this.checkMax(countyData, \"newConfirmed\");\n          this.checkMax(countyData, \"newDeaths\");\n\n          if (countySummary.population !== null) {\n            const denominator = countySummary.population / 1000000;\n\n            countyData.totalConfirmedPerCapita = Math.floor(\n              countyData.totalConfirmed / denominator\n            );\n            countyData.totalDeathsPerCapita = Math.floor(\n              countyData.totalDeaths / denominator\n            );\n\n            countyData.newConfirmedPerCapita = Math.floor(\n              countyData.newConfirmed / denominator\n            );\n            countyData.newDeathsPerCapita = Math.floor(\n              countyData.newDeaths / denominator\n            );\n\n            this.checkMax(countyData, \"totalConfirmedPerCapita\");\n            this.checkMax(countyData, \"totalDeathsPerCapita\");\n            this.checkMax(countyData, \"newConfirmedPerCapita\");\n            this.checkMax(countyData, \"newDeathsPerCapita\");\n          }\n\n          if (this.covid19!.days[d] == null) {\n            this.covid19!.days[d] = {};\n          }\n          this.covid19!.days[d][i.countyFIPS] = countyData;\n        }\n      });\n    });\n  }\n\n  generateLegends(): Metrics<Legend> {\n    const legends = Object.keys(this.max).reduce((res, k) => {\n      if (k === \"totalConfirmedGrowthToday\" || k === \"totalDeathsGrowthToday\") {\n        res[k as Metric] = new Legend([\n          new LegendItem(0, this.regularShades[0], 0, 0, true),\n          new LegendItem(1, this.regularShades[1], 1, 16, true),\n          new LegendItem(2, this.regularShades[2], 17, 32, true),\n          new LegendItem(3, this.regularShades[3], 33, 48, true),\n          new LegendItem(4, this.regularShades[4], 49, 64, true),\n          new LegendItem(5, this.regularShades[5], 65, 80, true),\n          new LegendItem(6, this.regularShades[6], 81, 99, true),\n          new LegendItem(7, this.regularShades[7], 100, null, true),\n        ]);\n      } else if (\n        k === \"totalConfirmedGrowthRate\" ||\n        k === \"totalDeathsGrowthRate\"\n      ) {\n        res[k as Metric] = new Legend([\n          new LegendItem(0, this.growthRateShades[0], 0, 0, true),\n          new LegendItem(1, this.growthRateShades[1], 1, 33, true),\n          new LegendItem(2, this.growthRateShades[2], 34, 66, true),\n          new LegendItem(3, this.growthRateShades[3], 67, 99, true),\n          new LegendItem(4, this.growthRateShades[4], 100, 100, true),\n          new LegendItem(5, this.growthRateShades[5], 101, 133, true),\n          new LegendItem(6, this.growthRateShades[6], 134, 166, true),\n          new LegendItem(7, this.growthRateShades[7], 167, 199, true),\n          new LegendItem(7, this.growthRateShades[8], 200, null, true),\n        ]);\n      } else {\n        const slider = new LogarithmicSlider(\n          this.regularShades.length,\n          this.max[k as Metric]!\n        );\n        const legendItems = this.regularShades.map(\n          (s, i) =>\n            new LegendItem(\n              i,\n              s,\n              i === 0 ? 0 : slider.getValue(i - 1) + 1,\n              slider.getValue(i),\n              true\n            )\n        );\n        res[k as Metric] = new Legend(legendItems);\n      }\n      return res;\n    }, {} as Metrics<Legend>);\n\n    return legends;\n  }\n}\n\ndeclare global {\n  interface Window {\n    initMap: () => void;\n    covid19: Covid19;\n  }\n}\n\nwindow.initMap = function initMap(): void {\n  const covid19 = new Covid19(\"map\");\n  window.covid19 = covid19;\n  covid19.initialize();\n};\n","import { Color, Metric, Metrics, Covid19Data } from \"./types\";\nimport { Legend } from \"./legend\";\n\nexport default class Map {\n  private map: google.maps.Map;\n  private infoWindow: google.maps.InfoWindow;\n  private currentDayIndex = 0;\n  private minPopulation?: number;\n  private maxPopulation?: number;\n  private animationId: NodeJS.Timeout | null = null;\n  private startDate = new Date(2020, 0, 22);\n\n  private shades: Color[] = [\n    { code: \"F2F0F7\", on: true },\n    { code: \"DADAEB\", on: true },\n    { code: \"BCBDDC\", on: true },\n    { code: \"9E9AC8\", on: true },\n    { code: \"807DBA\", on: true },\n    { code: \"6A51A3\", on: true },\n    { code: \"4A1486\", on: true },\n    { code: \"333333\", on: true },\n  ];\n\n  constructor(\n    private mapId: string,\n    private metric: Metric,\n    private data: Covid19Data,\n    private max: Metrics<number>,\n    private legends: Metrics<Legend>\n  ) {\n    this.currentDayIndex = data.days.length - 1;\n\n    this.map = new google.maps.Map(\n      document.getElementById(this.mapId) as Element,\n      {\n        zoom: 4,\n        center: { lat: 38.95809, lng: -95.26726 },\n      }\n    );\n    this.map.data.loadGeoJson(\"./data/gz_2010_us_050_00_20m.json\");\n    this.infoWindow = new google.maps.InfoWindow();\n\n    this.map.data.addListener(\"click\", (evt: google.maps.Data.MouseEvent) => {\n      console.log(evt);\n      this.showCountyDetails(evt);\n    });\n\n    this.handleMetric();\n    this.handleAnimation();\n    this.handleToggles();\n    this.handlePopulation();\n\n    this.styleMap();\n  }\n\n  handlePopulation(): void {\n    const minPopulation = $(\"#minPopulation\");\n    minPopulation.on(\"change\", () => {\n      const val = minPopulation.val();\n      this.minPopulation = val === \"\" ? undefined : (val as number) * 1000;\n\n      this.styleMap();\n    });\n\n    const maxPopulation = $(\"#maxPopulation\");\n    maxPopulation.on(\"change\", () => {\n      const val = maxPopulation.val();\n      this.maxPopulation = val === \"\" ? undefined : (val as number) * 1000;\n\n      this.styleMap();\n    });\n  }\n\n  handleToggles(): void {\n    $(\"#legend\").on(\"click\", \".legend-value\", (evt) => {\n      const target = $(evt.currentTarget);\n      const position = target.data(\"position\");\n\n      this.legends[this.metric]!.toggleItem(position);\n      target.toggleClass(\"on\");\n\n      this.styleMap();\n    });\n  }\n\n  handleAnimation(): void {\n    const adjust = (day: number): void => {\n      if (day >= 0 && day <= this.data.days.length - 1) {\n        this.currentDayIndex = day;\n        this.styleMap();\n      }\n    };\n    $(\"#rewind-all\").on(\"click\", () => adjust(0));\n    $(\"#rewind-1\").on(\"click\", () => adjust(this.currentDayIndex - 1));\n    $(\"#fast-forward-1\").on(\"click\", () => adjust(this.currentDayIndex + 1));\n    $(\"#toggle\").on(\"click\", () => {\n      if (this.animationId == null) {\n        $(\"#toggle\").removeClass(\"play\").addClass(\"pause\");\n        const update = (): void => {\n          this.animationId = setTimeout(() => {\n            if (this.currentDayIndex < this.data.days.length - 1) {\n              adjust(this.currentDayIndex + 1);\n              update();\n            } else {\n              $(\"#toggle\").click();\n            }\n          }, 50);\n        };\n\n        update();\n      } else {\n        $(\"#toggle\").removeClass(\"pause\").addClass(\"play\");\n        clearTimeout(this.animationId);\n        this.animationId = null;\n      }\n    });\n    $(\"#fast-forward-all\").on(\"click\", () => adjust(this.data.days.length - 1));\n  }\n\n  displayDate(): void {\n    const date = new Date(\n      this.startDate.getFullYear(),\n      this.startDate.getMonth(),\n      this.startDate.getDate()\n    );\n    date.setDate(date.getDate() + this.currentDayIndex);\n    $(\"#currentDate\").text(date.toLocaleDateString(\"en-US\"));\n  }\n\n  handleMetric(): void {\n    const $metric = $(\"#metric\");\n    $metric.on(\"change\", () => {\n      this.metric = $metric.val() as Metric;\n      this.styleMap();\n    });\n  }\n\n  showCountyDetails(evt: google.maps.Data.MouseEvent): void {\n    const geoId = this.getGeoId(evt.feature);\n\n    const countyData = this.data.days[this.currentDayIndex][geoId];\n    const county = this.data.counties[geoId];\n\n    const html = `\n<div><b>${county.county}, ${county.stateAbbr}</b></div>\n<div>Population:  ${county.population\n      .toString()\n      .replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")}</div>\n<p>Day ${this.currentDayIndex}</p>\n<p></p>\n<p>\n    New Confirmed: ${countyData.newConfirmed}\n    <br />\n    ${countyData.newConfirmedPerCapita} per million\n</p>\n<p>\n    Total Confirmed: ${countyData.totalConfirmed}\n    <br />\n    ${countyData.totalConfirmedPerCapita} per million\n    <br />\n    ${countyData.totalConfirmedGrowthToday}% growth from yesterday\n    <br />\n    ${countyData.totalConfirmedGrowthRate}% growth change from yesterday\n</p>\n<p></p>\n<p>\n    New Deaths: ${countyData.newDeaths}\n    <br />\n    ${countyData.newDeathsPerCapita} per million\n</p>\n<p>\n    Total Deaths: ${countyData.totalDeaths}\n    <br />\n    ${countyData.totalDeathsPerCapita} per million\n    <br />\n    ${countyData.totalDeathsGrowthToday}% growth from yesterday\n    <br />\n    ${countyData.totalDeathsGrowthRate}% growth change from yesterday\n</p>\n  `;\n\n    this.infoWindow!.setContent(html);\n    this.infoWindow!.setPosition(evt.latLng);\n    this.infoWindow!.setOptions({ pixelOffset: new google.maps.Size(0, -34) });\n    this.infoWindow!.open(this.map!);\n  }\n\n  getGeoId(feature: google.maps.Data.Feature): string {\n    return feature.getProperty(\"GEOID\");\n  }\n\n  styleMap(): void {\n    this.displayDate();\n    const day = this.currentDayIndex;\n\n    if (day == 0) {\n      $(\"#rewind-1,#rewind-all\").addClass(\"disabled\");\n    } else {\n      $(\"#rewind-1,#rewind-all\").removeClass(\"disabled\");\n    }\n\n    if (day == this.data.days.length - 1) {\n      $(\"#fast-forward-1,#fast-forward-all,#toggle\").addClass(\"disabled\");\n    } else {\n      $(\"#fast-forward-1,#fast-forward-all,#toggle\").removeClass(\"disabled\");\n    }\n\n    this.displayLegend();\n    this.map!.data.setStyle((feature) => this.styleFeature(feature));\n  }\n\n  styleFeature(\n    feature: google.maps.Data.Feature\n  ): google.maps.Data.StyleOptions {\n    const geoId = this.getGeoId(feature);\n    const countyData = this.data.days[this.currentDayIndex][geoId];\n    const county = this.data.counties[geoId];\n\n    let bucket = \"white\";\n    if (countyData != null) {\n      const value = countyData[this.metric] || 0;\n      const shade = this.legends[this.metric]!.getPosition(value);\n\n      if (shade.isOn()) {\n        if (\n          (this.minPopulation == null ||\n            this.minPopulation <= county.population) &&\n          (this.maxPopulation == null ||\n            this.maxPopulation >= county.population)\n        ) {\n          bucket = \"#\" + shade.getColor();\n        }\n      }\n    }\n\n    return {\n      fillColor: bucket,\n      strokeWeight: 1,\n      strokeColor: \"#CCCCCC\",\n      fillOpacity: 0.75,\n    };\n  }\n\n  displayLegend(): void {\n    const legend = this.legends[this.metric];\n    $(\"#legend\").html(legend!.getHTML());\n  }\n}\n","export default class LogarithmicSlider {\n  private minp: number;\n  private maxp: number;\n  private minv: number;\n  private maxv: number;\n  private scale: number;\n\n  constructor(private buckets: number, private max: number) {\n    this.minp = 0;\n    this.maxp = buckets - 1;\n    this.minv = 0;\n    this.maxv = Math.log(max);\n    this.scale = (this.maxv - this.minv) / (this.maxp - this.minp);\n  }\n  getPosition(value: number): number {\n    if (value <= 0) {\n      return 0;\n    }\n    let position = Math.ceil(\n      (Math.log(value) - this.minv) / this.scale + this.minp\n    );\n    if (position === 0 && value > 0) {\n      position = 1;\n    }\n    return position;\n  }\n  getValue(position: number): number {\n    let value = Math.round(\n      Math.exp(this.minv + this.scale * (position - this.minp))\n    );\n    if (position === 0 && value > 0) {\n      value = 0;\n    }\n    return value;\n  }\n}\n","export class LegendItem {\n  constructor(\n    private position: number,\n    private color: string,\n    private min: number | null,\n    private max: number | null,\n    private on: boolean\n  ) {}\n\n  toggle(): void {\n    this.on = !this.on;\n  }\n\n  isOn(): boolean {\n    return this.on;\n  }\n\n  generateLegend(): string {\n    let text = `${this.min} to ${this.max}`;\n    if (this.min === this.max) {\n      text = `${this.min}`;\n    } else if (this.min === null) {\n      text = `<= ${this.max}`;\n    } else if (this.max === null) {\n      text = `>= ${this.min}`;\n    }\n\n    return `\n<div class='col-6 col-sm-3'>\n  <div data-position=\"${this.position}\" class=\"legend-value ${\n      this.on ? \"on\" : \"\"\n    }\" style=\"background-color: #${this.color}\">\n    <div>${text}</div>\n  </div>\n</div>\n    `;\n  }\n\n  isInRange(value: number): boolean {\n    return (\n      (this.min === null || value >= this.min) &&\n      (this.max === null || value <= this.max)\n    );\n  }\n  getColor(): string {\n    return this.color;\n  }\n}\n\nexport class Legend {\n  constructor(private items: LegendItem[]) {}\n\n  toggleItem(position: number): void {\n    this.items[position].toggle();\n  }\n\n  getHTML(): string {\n    let html = \"\";\n\n    html += \"<div>\";\n    html += \"<div class='row align-items-center no-gutters'>\";\n\n    this.items.forEach((i) => (html += i.generateLegend()));\n\n    html += \"</div>\";\n    html += \"</div>\";\n\n    return html;\n  }\n\n  isOn(position: number): boolean {\n    return this.items[position].isOn();\n  }\n\n  getPosition(value: number): LegendItem {\n    return this.items.find((i) => i.isInRange(value))!;\n  }\n}\n"],"sourceRoot":""}